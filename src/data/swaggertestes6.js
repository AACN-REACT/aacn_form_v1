/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.13.0 (NJsonSchema v9.13.17.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
System.register("swagger", [], function (exports_1, context_1) {
    "use strict";
    var Client, AddressQuery, Address, DtoResponseWrapperOfBoolean, KeyValuePairOfStringAndString, ErrorInfo, DtoResponseWrapperOfGuid, EmailAddressQuery, Email, DtoResponseWrapperOfEmail, PhoneQuery, Phone, DtoResponseWrapperOfPhone, ILookupable, SwaggerException;
    var __moduleName = context_1 && context_1.id;
    function throwException(message, status, response, headers, result) {
        if (result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response, headers, null);
    }
    return {
        setters: [],
        execute: function () {/* tslint:disable */
            //----------------------
            // <auto-generated>
            //     Generated using the NSwag toolchain v12.0.13.0 (NJsonSchema v9.13.17.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
            // </auto-generated>
            //----------------------
            // ReSharper disable InconsistentNaming
            Client = class Client {
                constructor(baseUrl, http) {
                    this.jsonParseReviver = undefined;
                    this.http = http ? http : window;
                    this.baseUrl = baseUrl ? baseUrl : "";
                }
                /**
                 * Get an Individual Customer's Address
                Get Address
                 * @param customerKey Customer's Key
                 * @param addressKey Address Key
                 * @return Success
                 */
                getAddress(customerKey, addressKey, username, isTypescriptClient) {
                    let url_ = this.baseUrl + "/api/customers/{customerKey}/addresses/{addressKey}";
                    if (customerKey === undefined || customerKey === null)
                        throw new Error("The parameter 'customerKey' must be defined.");
                    url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
                    if (addressKey === undefined || addressKey === null)
                        throw new Error("The parameter 'addressKey' must be defined.");
                    url_ = url_.replace("{addressKey}", encodeURIComponent("" + addressKey));
                    url_ = url_.replace(/[?&]$/, "");
                    let options_ = {
                        method: "GET",
                        headers: {
                            "username": username !== undefined && username !== null ? "" + username : "",
                            "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                            "Accept": "application/json"
                        }
                    };
                    return this.http.fetch(url_, options_).then((_response) => {
                        return this.processGetAddress(_response);
                    });
                }
                processGetAddress(response) {
                    const status = response.status;
                    let _headers = {};
                    if (response.headers && response.headers.forEach) {
                        response.headers.forEach((v, k) => _headers[k] = v);
                    }
                    ;
                    if (status === 200) {
                        return response.text().then((_responseText) => {
                            let result200 = null;
                            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            result200 = resultData200 ? AddressQuery.fromJS(resultData200) : new AddressQuery();
                            return result200;
                        });
                    }
                    else if (status === 404) {
                        return response.text().then((_responseText) => {
                            let result404 = null;
                            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            result404 = resultData404 ? AddressQuery.fromJS(resultData404) : new AddressQuery();
                            return throwException("A server error occurred.", status, _responseText, _headers, result404);
                        });
                    }
                    else if (status !== 200 && status !== 204) {
                        return response.text().then((_responseText) => {
                            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return Promise.resolve(null);
                }
                /**
                 * Update an Individual Customer's Address
                 * @param customerKey Customer's Key
                 * @param addressKey Address Key
                 * @param address (optional) Address
                 * @return Returns the updated as result within DtoResponseWrapper
                 */
                updateAddress(customerKey, addressKey, address, username, isTypescriptClient) {
                    let url_ = this.baseUrl + "/api/customers/{customerKey}/addresses/{addressKey}";
                    if (customerKey === undefined || customerKey === null)
                        throw new Error("The parameter 'customerKey' must be defined.");
                    url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
                    if (addressKey === undefined || addressKey === null)
                        throw new Error("The parameter 'addressKey' must be defined.");
                    url_ = url_.replace("{addressKey}", encodeURIComponent("" + addressKey));
                    url_ = url_.replace(/[?&]$/, "");
                    const content_ = JSON.stringify(address);
                    let options_ = {
                        body: content_,
                        method: "PUT",
                        headers: {
                            "username": username !== undefined && username !== null ? "" + username : "",
                            "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.http.fetch(url_, options_).then((_response) => {
                        return this.processUpdateAddress(_response);
                    });
                }
                processUpdateAddress(response) {
                    const status = response.status;
                    let _headers = {};
                    if (response.headers && response.headers.forEach) {
                        response.headers.forEach((v, k) => _headers[k] = v);
                    }
                    ;
                    if (status === 200) {
                        return response.text().then((_responseText) => {
                            let result200 = null;
                            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            result200 = resultData200 ? DtoResponseWrapperOfBoolean.fromJS(resultData200) : new DtoResponseWrapperOfBoolean();
                            return result200;
                        });
                    }
                    else if (status === 400) {
                        return response.text().then((_responseText) => {
                            let result400 = null;
                            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            result400 = resultData400 ? DtoResponseWrapperOfBoolean.fromJS(resultData400) : new DtoResponseWrapperOfBoolean();
                            return throwException("A server error occurred.", status, _responseText, _headers, result400);
                        });
                    }
                    else if (status === 500) {
                        return response.text().then((_responseText) => {
                            let result500 = null;
                            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            result500 = resultData500 ? DtoResponseWrapperOfBoolean.fromJS(resultData500) : new DtoResponseWrapperOfBoolean();
                            return throwException("A server error occurred.", status, _responseText, _headers, result500);
                        });
                    }
                    else if (status !== 200 && status !== 204) {
                        return response.text().then((_responseText) => {
                            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return Promise.resolve(null);
                }
                /**
                 * Delete an Individual Customer's Address
                 * @param customerKey Customer's Key
                 * @param addressKey Address Key
                 * @return Success
                 */
                deleteAddress(customerKey, addressKey, username, isTypescriptClient) {
                    let url_ = this.baseUrl + "/api/customers/{customerKey}/addresses/{addressKey}";
                    if (customerKey === undefined || customerKey === null)
                        throw new Error("The parameter 'customerKey' must be defined.");
                    url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
                    if (addressKey === undefined || addressKey === null)
                        throw new Error("The parameter 'addressKey' must be defined.");
                    url_ = url_.replace("{addressKey}", encodeURIComponent("" + addressKey));
                    url_ = url_.replace(/[?&]$/, "");
                    let options_ = {
                        method: "DELETE",
                        headers: {
                            "username": username !== undefined && username !== null ? "" + username : "",
                            "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                            "Accept": "application/json"
                        }
                    };
                    return this.http.fetch(url_, options_).then((_response) => {
                        return this.processDeleteAddress(_response);
                    });
                }
                processDeleteAddress(response) {
                    const status = response.status;
                    let _headers = {};
                    if (response.headers && response.headers.forEach) {
                        response.headers.forEach((v, k) => _headers[k] = v);
                    }
                    ;
                    if (status === 200) {
                        return response.text().then((_responseText) => {
                            let result200 = null;
                            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            result200 = resultData200 ? DtoResponseWrapperOfBoolean.fromJS(resultData200) : new DtoResponseWrapperOfBoolean();
                            return result200;
                        });
                    }
                    else if (status !== 200 && status !== 204) {
                        return response.text().then((_responseText) => {
                            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return Promise.resolve(null);
                }
                /**
                 * Get a collection of Individual Customer's Addresseses
                 * @param customerKey Customer's Key
                 * @return Success
                 */
                getAddresses(customerKey, username, isTypescriptClient) {
                    let url_ = this.baseUrl + "/api/customers/{customerKey}/addresses";
                    if (customerKey === undefined || customerKey === null)
                        throw new Error("The parameter 'customerKey' must be defined.");
                    url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
                    url_ = url_.replace(/[?&]$/, "");
                    let options_ = {
                        method: "GET",
                        headers: {
                            "username": username !== undefined && username !== null ? "" + username : "",
                            "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                            "Accept": "application/json"
                        }
                    };
                    return this.http.fetch(url_, options_).then((_response) => {
                        return this.processGetAddresses(_response);
                    });
                }
                processGetAddresses(response) {
                    const status = response.status;
                    let _headers = {};
                    if (response.headers && response.headers.forEach) {
                        response.headers.forEach((v, k) => _headers[k] = v);
                    }
                    ;
                    if (status === 200) {
                        return response.text().then((_responseText) => {
                            let result200 = null;
                            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            if (resultData200 && resultData200.constructor === Array) {
                                result200 = [];
                                for (let item of resultData200)
                                    result200.push(AddressQuery.fromJS(item));
                            }
                            return result200;
                        });
                    }
                    else if (status === 404) {
                        return response.text().then((_responseText) => {
                            let result404 = null;
                            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            result404 = resultData404 ? AddressQuery.fromJS(resultData404) : new AddressQuery();
                            return throwException("A server error occurred.", status, _responseText, _headers, result404);
                        });
                    }
                    else if (status !== 200 && status !== 204) {
                        return response.text().then((_responseText) => {
                            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return Promise.resolve(null);
                }
                /**
                 * Creates an Individual Customer's Address
                 * @param customerKey Customer Key
                 * @param address (optional) Address
                 * @return Success
                 */
                addAddress(customerKey, address, username, isTypescriptClient) {
                    let url_ = this.baseUrl + "/api/customers/{customerKey}/addresses";
                    if (customerKey === undefined || customerKey === null)
                        throw new Error("The parameter 'customerKey' must be defined.");
                    url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
                    url_ = url_.replace(/[?&]$/, "");
                    const content_ = JSON.stringify(address);
                    let options_ = {
                        body: content_,
                        method: "POST",
                        headers: {
                            "username": username !== undefined && username !== null ? "" + username : "",
                            "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.http.fetch(url_, options_).then((_response) => {
                        return this.processAddAddress(_response);
                    });
                }
                processAddAddress(response) {
                    const status = response.status;
                    let _headers = {};
                    if (response.headers && response.headers.forEach) {
                        response.headers.forEach((v, k) => _headers[k] = v);
                    }
                    ;
                    if (status === 200) {
                        return response.text().then((_responseText) => {
                            let result200 = null;
                            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            result200 = resultData200 ? DtoResponseWrapperOfGuid.fromJS(resultData200) : new DtoResponseWrapperOfGuid();
                            return result200;
                        });
                    }
                    else if (status === 201) {
                        return response.text().then((_responseText) => {
                            let result201 = null;
                            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            result201 = resultData201 ? DtoResponseWrapperOfGuid.fromJS(resultData201) : new DtoResponseWrapperOfGuid();
                            return result201;
                        });
                    }
                    else if (status === 400) {
                        return response.text().then((_responseText) => {
                            return throwException("A server error occurred.", status, _responseText, _headers);
                        });
                    }
                    else if (status === 500) {
                        return response.text().then((_responseText) => {
                            return throwException("A server error occurred.", status, _responseText, _headers);
                        });
                    }
                    else if (status !== 200 && status !== 204) {
                        return response.text().then((_responseText) => {
                            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return Promise.resolve(null);
                }
                /**
                 * Get an single Individual Customer's Primary Address
                 * @param customerKey Customer Key
                 * @return Success
                 */
                getPrimaryAddress(customerKey, username, isTypescriptClient) {
                    let url_ = this.baseUrl + "/api/customers/{customerKey}/addresses/primary";
                    if (customerKey === undefined || customerKey === null)
                        throw new Error("The parameter 'customerKey' must be defined.");
                    url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
                    url_ = url_.replace(/[?&]$/, "");
                    let options_ = {
                        method: "GET",
                        headers: {
                            "username": username !== undefined && username !== null ? "" + username : "",
                            "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                            "Accept": "application/json"
                        }
                    };
                    return this.http.fetch(url_, options_).then((_response) => {
                        return this.processGetPrimaryAddress(_response);
                    });
                }
                processGetPrimaryAddress(response) {
                    const status = response.status;
                    let _headers = {};
                    if (response.headers && response.headers.forEach) {
                        response.headers.forEach((v, k) => _headers[k] = v);
                    }
                    ;
                    if (status === 200) {
                        return response.text().then((_responseText) => {
                            let result200 = null;
                            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            result200 = resultData200 ? AddressQuery.fromJS(resultData200) : new AddressQuery();
                            return result200;
                        });
                    }
                    else if (status === 404) {
                        return response.text().then((_responseText) => {
                            let result404 = null;
                            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            result404 = resultData404 ? AddressQuery.fromJS(resultData404) : new AddressQuery();
                            return throwException("A server error occurred.", status, _responseText, _headers, result404);
                        });
                    }
                    else if (status !== 200 && status !== 204) {
                        return response.text().then((_responseText) => {
                            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return Promise.resolve(null);
                }
                /**
                 * Gets and Individual Customers Email Address
                 * @param customerKey Customer Key
                 * @param emailAddressKey Email Address Key
                 * @return Success
                 */
                getEmailAddress(customerKey, emailAddressKey, username, isTypescriptClient) {
                    let url_ = this.baseUrl + "/api/customers/{customerKey}/emailaddresses/{emailAddressKey}";
                    if (customerKey === undefined || customerKey === null)
                        throw new Error("The parameter 'customerKey' must be defined.");
                    url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
                    if (emailAddressKey === undefined || emailAddressKey === null)
                        throw new Error("The parameter 'emailAddressKey' must be defined.");
                    url_ = url_.replace("{emailAddressKey}", encodeURIComponent("" + emailAddressKey));
                    url_ = url_.replace(/[?&]$/, "");
                    let options_ = {
                        method: "GET",
                        headers: {
                            "username": username !== undefined && username !== null ? "" + username : "",
                            "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                            "Accept": "application/json"
                        }
                    };
                    return this.http.fetch(url_, options_).then((_response) => {
                        return this.processGetEmailAddress(_response);
                    });
                }
                processGetEmailAddress(response) {
                    const status = response.status;
                    let _headers = {};
                    if (response.headers && response.headers.forEach) {
                        response.headers.forEach((v, k) => _headers[k] = v);
                    }
                    ;
                    if (status === 200) {
                        return response.text().then((_responseText) => {
                            let result200 = null;
                            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            result200 = resultData200 ? EmailAddressQuery.fromJS(resultData200) : new EmailAddressQuery();
                            return result200;
                        });
                    }
                    else if (status !== 200 && status !== 204) {
                        return response.text().then((_responseText) => {
                            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return Promise.resolve(null);
                }
                /**
                 * Updates an Individual Customer's Email Address
                 * @param customerKey Customers Key
                 * @param emailAddressKey Email Address Key
                 * @param emailAddress (optional) Email Address
                 * @return Success
                 */
                updateEmailAddress(customerKey, emailAddressKey, emailAddress, username, isTypescriptClient) {
                    let url_ = this.baseUrl + "/api/customers/{customerKey}/emailaddresses/{emailAddressKey}";
                    if (customerKey === undefined || customerKey === null)
                        throw new Error("The parameter 'customerKey' must be defined.");
                    url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
                    if (emailAddressKey === undefined || emailAddressKey === null)
                        throw new Error("The parameter 'emailAddressKey' must be defined.");
                    url_ = url_.replace("{emailAddressKey}", encodeURIComponent("" + emailAddressKey));
                    url_ = url_.replace(/[?&]$/, "");
                    const content_ = JSON.stringify(emailAddress);
                    let options_ = {
                        body: content_,
                        method: "PUT",
                        headers: {
                            "username": username !== undefined && username !== null ? "" + username : "",
                            "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.http.fetch(url_, options_).then((_response) => {
                        return this.processUpdateEmailAddress(_response);
                    });
                }
                processUpdateEmailAddress(response) {
                    const status = response.status;
                    let _headers = {};
                    if (response.headers && response.headers.forEach) {
                        response.headers.forEach((v, k) => _headers[k] = v);
                    }
                    ;
                    if (status === 200) {
                        return response.text().then((_responseText) => {
                            let result200 = null;
                            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            result200 = resultData200 ? DtoResponseWrapperOfEmail.fromJS(resultData200) : new DtoResponseWrapperOfEmail();
                            return result200;
                        });
                    }
                    else if (status === 400) {
                        return response.text().then((_responseText) => {
                            let result400 = null;
                            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            result400 = resultData400 ? DtoResponseWrapperOfBoolean.fromJS(resultData400) : new DtoResponseWrapperOfBoolean();
                            return throwException("A server error occurred.", status, _responseText, _headers, result400);
                        });
                    }
                    else if (status === 500) {
                        return response.text().then((_responseText) => {
                            let result500 = null;
                            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            result500 = resultData500 ? DtoResponseWrapperOfBoolean.fromJS(resultData500) : new DtoResponseWrapperOfBoolean();
                            return throwException("A server error occurred.", status, _responseText, _headers, result500);
                        });
                    }
                    else if (status !== 200 && status !== 204) {
                        return response.text().then((_responseText) => {
                            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return Promise.resolve(null);
                }
                /**
                 * Deletes an Individual Customer's Email address
                 * @param customerKey Customer Key
                 * @param emailAddressKey Email Address Key
                 * @return Success
                 */
                deleteEmailAddress(customerKey, emailAddressKey, username, isTypescriptClient) {
                    let url_ = this.baseUrl + "/api/customers/{customerKey}/emailaddresses/{emailAddressKey}";
                    if (customerKey === undefined || customerKey === null)
                        throw new Error("The parameter 'customerKey' must be defined.");
                    url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
                    if (emailAddressKey === undefined || emailAddressKey === null)
                        throw new Error("The parameter 'emailAddressKey' must be defined.");
                    url_ = url_.replace("{emailAddressKey}", encodeURIComponent("" + emailAddressKey));
                    url_ = url_.replace(/[?&]$/, "");
                    let options_ = {
                        method: "DELETE",
                        headers: {
                            "username": username !== undefined && username !== null ? "" + username : "",
                            "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                            "Accept": "application/json"
                        }
                    };
                    return this.http.fetch(url_, options_).then((_response) => {
                        return this.processDeleteEmailAddress(_response);
                    });
                }
                processDeleteEmailAddress(response) {
                    const status = response.status;
                    let _headers = {};
                    if (response.headers && response.headers.forEach) {
                        response.headers.forEach((v, k) => _headers[k] = v);
                    }
                    ;
                    if (status === 200) {
                        return response.text().then((_responseText) => {
                            let result200 = null;
                            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            result200 = resultData200 ? DtoResponseWrapperOfBoolean.fromJS(resultData200) : new DtoResponseWrapperOfBoolean();
                            return result200;
                        });
                    }
                    else if (status !== 200 && status !== 204) {
                        return response.text().then((_responseText) => {
                            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return Promise.resolve(null);
                }
                /**
                 * Gets the Individual Customer's primary email address by CustomerKey
                 * @param customerKey Customer Key
                 * @return Success
                 */
                getEmailAddressPrimary(customerKey, username, isTypescriptClient) {
                    let url_ = this.baseUrl + "/api/customers/{customerKey}/emailaddresses/primary";
                    if (customerKey === undefined || customerKey === null)
                        throw new Error("The parameter 'customerKey' must be defined.");
                    url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
                    url_ = url_.replace(/[?&]$/, "");
                    let options_ = {
                        method: "GET",
                        headers: {
                            "username": username !== undefined && username !== null ? "" + username : "",
                            "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                            "Accept": "application/json"
                        }
                    };
                    return this.http.fetch(url_, options_).then((_response) => {
                        return this.processGetEmailAddressPrimary(_response);
                    });
                }
                processGetEmailAddressPrimary(response) {
                    const status = response.status;
                    let _headers = {};
                    if (response.headers && response.headers.forEach) {
                        response.headers.forEach((v, k) => _headers[k] = v);
                    }
                    ;
                    if (status === 200) {
                        return response.text().then((_responseText) => {
                            let result200 = null;
                            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            result200 = resultData200 ? EmailAddressQuery.fromJS(resultData200) : new EmailAddressQuery();
                            return result200;
                        });
                    }
                    else if (status !== 200 && status !== 204) {
                        return response.text().then((_responseText) => {
                            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return Promise.resolve(null);
                }
                /**
                 * @return Success
                 */
                getEmailAddresses(customerKey, username, isTypescriptClient) {
                    let url_ = this.baseUrl + "/api/customers/{customerKey}/emailaddresses";
                    if (customerKey === undefined || customerKey === null)
                        throw new Error("The parameter 'customerKey' must be defined.");
                    url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
                    url_ = url_.replace(/[?&]$/, "");
                    let options_ = {
                        method: "GET",
                        headers: {
                            "username": username !== undefined && username !== null ? "" + username : "",
                            "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                            "Accept": "application/json"
                        }
                    };
                    return this.http.fetch(url_, options_).then((_response) => {
                        return this.processGetEmailAddresses(_response);
                    });
                }
                processGetEmailAddresses(response) {
                    const status = response.status;
                    let _headers = {};
                    if (response.headers && response.headers.forEach) {
                        response.headers.forEach((v, k) => _headers[k] = v);
                    }
                    ;
                    if (status === 200) {
                        return response.text().then((_responseText) => {
                            let result200 = null;
                            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            if (resultData200 && resultData200.constructor === Array) {
                                result200 = [];
                                for (let item of resultData200)
                                    result200.push(EmailAddressQuery.fromJS(item));
                            }
                            return result200;
                        });
                    }
                    else if (status !== 200 && status !== 204) {
                        return response.text().then((_responseText) => {
                            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return Promise.resolve(null);
                }
                /**
                 * Adds an new Individual Customer Email Address
                 * @param customerKey Customer's Key
                 * @param emailAddress (optional) Email Address
                 * @return Success
                 */
                addEmailAddress(customerKey, emailAddress, username, isTypescriptClient) {
                    let url_ = this.baseUrl + "/api/customers/{customerKey}/emailaddresses";
                    if (customerKey === undefined || customerKey === null)
                        throw new Error("The parameter 'customerKey' must be defined.");
                    url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
                    url_ = url_.replace(/[?&]$/, "");
                    const content_ = JSON.stringify(emailAddress);
                    let options_ = {
                        body: content_,
                        method: "POST",
                        headers: {
                            "username": username !== undefined && username !== null ? "" + username : "",
                            "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.http.fetch(url_, options_).then((_response) => {
                        return this.processAddEmailAddress(_response);
                    });
                }
                processAddEmailAddress(response) {
                    const status = response.status;
                    let _headers = {};
                    if (response.headers && response.headers.forEach) {
                        response.headers.forEach((v, k) => _headers[k] = v);
                    }
                    ;
                    if (status === 200) {
                        return response.text().then((_responseText) => {
                            let result200 = null;
                            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            result200 = resultData200 ? DtoResponseWrapperOfEmail.fromJS(resultData200) : new DtoResponseWrapperOfEmail();
                            return result200;
                        });
                    }
                    else if (status !== 200 && status !== 204) {
                        return response.text().then((_responseText) => {
                            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return Promise.resolve(null);
                }
                /**
                 * Get an individual customers phone number
                 * @param customerKey Customer Key
                 * @param phoneKey Phone Key
                 * @return Success
                 */
                getPhone(customerKey, phoneKey, username, isTypescriptClient) {
                    let url_ = this.baseUrl + "/api/customers/{customerKey}/phones/{phoneKey}";
                    if (customerKey === undefined || customerKey === null)
                        throw new Error("The parameter 'customerKey' must be defined.");
                    url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
                    if (phoneKey === undefined || phoneKey === null)
                        throw new Error("The parameter 'phoneKey' must be defined.");
                    url_ = url_.replace("{phoneKey}", encodeURIComponent("" + phoneKey));
                    url_ = url_.replace(/[?&]$/, "");
                    let options_ = {
                        method: "GET",
                        headers: {
                            "username": username !== undefined && username !== null ? "" + username : "",
                            "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                            "Accept": "application/json"
                        }
                    };
                    return this.http.fetch(url_, options_).then((_response) => {
                        return this.processGetPhone(_response);
                    });
                }
                processGetPhone(response) {
                    const status = response.status;
                    let _headers = {};
                    if (response.headers && response.headers.forEach) {
                        response.headers.forEach((v, k) => _headers[k] = v);
                    }
                    ;
                    if (status === 200) {
                        return response.text().then((_responseText) => {
                            let result200 = null;
                            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            result200 = resultData200 ? PhoneQuery.fromJS(resultData200) : new PhoneQuery();
                            return result200;
                        });
                    }
                    else if (status !== 200 && status !== 204) {
                        return response.text().then((_responseText) => {
                            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return Promise.resolve(null);
                }
                /**
                 * Update an Individual Customer's Phone Number
                 * @param customerKey Customer Phone Number
                 * @param phoneKey Phone Key
                 * @param phone (optional) Phone
                 * @return Returns the newly created phone as result within DtoResponseWrapper
                 */
                updatePhone(customerKey, phoneKey, phone, username, isTypescriptClient) {
                    let url_ = this.baseUrl + "/api/customers/{customerKey}/phones/{phoneKey}";
                    if (customerKey === undefined || customerKey === null)
                        throw new Error("The parameter 'customerKey' must be defined.");
                    url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
                    if (phoneKey === undefined || phoneKey === null)
                        throw new Error("The parameter 'phoneKey' must be defined.");
                    url_ = url_.replace("{phoneKey}", encodeURIComponent("" + phoneKey));
                    url_ = url_.replace(/[?&]$/, "");
                    const content_ = JSON.stringify(phone);
                    let options_ = {
                        body: content_,
                        method: "PUT",
                        headers: {
                            "username": username !== undefined && username !== null ? "" + username : "",
                            "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.http.fetch(url_, options_).then((_response) => {
                        return this.processUpdatePhone(_response);
                    });
                }
                processUpdatePhone(response) {
                    const status = response.status;
                    let _headers = {};
                    if (response.headers && response.headers.forEach) {
                        response.headers.forEach((v, k) => _headers[k] = v);
                    }
                    ;
                    if (status === 200) {
                        return response.text().then((_responseText) => {
                            let result200 = null;
                            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            result200 = resultData200 ? DtoResponseWrapperOfPhone.fromJS(resultData200) : new DtoResponseWrapperOfPhone();
                            return result200;
                        });
                    }
                    else if (status !== 200 && status !== 204) {
                        return response.text().then((_responseText) => {
                            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return Promise.resolve(null);
                }
                /**
                 * Deletes an Individual Customer's Phone Number
                 * @param customerKey Customer's Key
                 * @param phoneKey Phone Key
                 * @return Success
                 */
                deletePhone(customerKey, phoneKey, username, isTypescriptClient) {
                    let url_ = this.baseUrl + "/api/customers/{customerKey}/phones/{phoneKey}";
                    if (customerKey === undefined || customerKey === null)
                        throw new Error("The parameter 'customerKey' must be defined.");
                    url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
                    if (phoneKey === undefined || phoneKey === null)
                        throw new Error("The parameter 'phoneKey' must be defined.");
                    url_ = url_.replace("{phoneKey}", encodeURIComponent("" + phoneKey));
                    url_ = url_.replace(/[?&]$/, "");
                    let options_ = {
                        method: "DELETE",
                        headers: {
                            "username": username !== undefined && username !== null ? "" + username : "",
                            "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                            "Accept": "application/json"
                        }
                    };
                    return this.http.fetch(url_, options_).then((_response) => {
                        return this.processDeletePhone(_response);
                    });
                }
                processDeletePhone(response) {
                    const status = response.status;
                    let _headers = {};
                    if (response.headers && response.headers.forEach) {
                        response.headers.forEach((v, k) => _headers[k] = v);
                    }
                    ;
                    if (status === 200) {
                        return response.text().then((_responseText) => {
                            let result200 = null;
                            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            result200 = resultData200 ? DtoResponseWrapperOfBoolean.fromJS(resultData200) : new DtoResponseWrapperOfBoolean();
                            return result200;
                        });
                    }
                    else if (status !== 200 && status !== 204) {
                        return response.text().then((_responseText) => {
                            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return Promise.resolve(null);
                }
                /**
                 * Gets a collection of Individual Customer's Phone Numbers
                 * @param customerKey Customer's Key
                 * @return Success
                 */
                getPhones(customerKey, username, isTypescriptClient) {
                    let url_ = this.baseUrl + "/api/customers/{customerKey}/phones";
                    if (customerKey === undefined || customerKey === null)
                        throw new Error("The parameter 'customerKey' must be defined.");
                    url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
                    url_ = url_.replace(/[?&]$/, "");
                    let options_ = {
                        method: "GET",
                        headers: {
                            "username": username !== undefined && username !== null ? "" + username : "",
                            "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                            "Accept": "application/json"
                        }
                    };
                    return this.http.fetch(url_, options_).then((_response) => {
                        return this.processGetPhones(_response);
                    });
                }
                processGetPhones(response) {
                    const status = response.status;
                    let _headers = {};
                    if (response.headers && response.headers.forEach) {
                        response.headers.forEach((v, k) => _headers[k] = v);
                    }
                    ;
                    if (status === 200) {
                        return response.text().then((_responseText) => {
                            let result200 = null;
                            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            if (resultData200 && resultData200.constructor === Array) {
                                result200 = [];
                                for (let item of resultData200)
                                    result200.push(PhoneQuery.fromJS(item));
                            }
                            return result200;
                        });
                    }
                    else if (status !== 200 && status !== 204) {
                        return response.text().then((_responseText) => {
                            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return Promise.resolve(null);
                }
                /**
                 * Adds a Individual Customer's Phone Number
                 * @param customerKey Individual Customer's Key
                 * @param phone (optional) Phone
                 * @return Returns the newly created phone as result within DtoResponseWrapper
                 */
                addPhone(customerKey, phone, username, isTypescriptClient) {
                    let url_ = this.baseUrl + "/api/customers/{customerKey}/phones";
                    if (customerKey === undefined || customerKey === null)
                        throw new Error("The parameter 'customerKey' must be defined.");
                    url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
                    url_ = url_.replace(/[?&]$/, "");
                    const content_ = JSON.stringify(phone);
                    let options_ = {
                        body: content_,
                        method: "POST",
                        headers: {
                            "username": username !== undefined && username !== null ? "" + username : "",
                            "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        }
                    };
                    return this.http.fetch(url_, options_).then((_response) => {
                        return this.processAddPhone(_response);
                    });
                }
                processAddPhone(response) {
                    const status = response.status;
                    let _headers = {};
                    if (response.headers && response.headers.forEach) {
                        response.headers.forEach((v, k) => _headers[k] = v);
                    }
                    ;
                    if (status === 200) {
                        return response.text().then((_responseText) => {
                            let result200 = null;
                            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            result200 = resultData200 ? DtoResponseWrapperOfPhone.fromJS(resultData200) : new DtoResponseWrapperOfPhone();
                            return result200;
                        });
                    }
                    else if (status === 201) {
                        return response.text().then((_responseText) => {
                            let result201 = null;
                            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            result201 = resultData201 ? DtoResponseWrapperOfGuid.fromJS(resultData201) : new DtoResponseWrapperOfGuid();
                            return throwException("A server error occurred.", status, _responseText, _headers, result201);
                        });
                    }
                    else if (status !== 200 && status !== 204) {
                        return response.text().then((_responseText) => {
                            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return Promise.resolve(null);
                }
                /**
                 * Gets an Individual Customers Primary Phone Number
                 * @param customerKey Customer's Key
                 * @return Success
                 */
                getPrimaryPhone(customerKey, username, isTypescriptClient) {
                    let url_ = this.baseUrl + "/api/customers/{customerKey}/phones/primary";
                    if (customerKey === undefined || customerKey === null)
                        throw new Error("The parameter 'customerKey' must be defined.");
                    url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
                    url_ = url_.replace(/[?&]$/, "");
                    let options_ = {
                        method: "GET",
                        headers: {
                            "username": username !== undefined && username !== null ? "" + username : "",
                            "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                            "Accept": "application/json"
                        }
                    };
                    return this.http.fetch(url_, options_).then((_response) => {
                        return this.processGetPrimaryPhone(_response);
                    });
                }
                processGetPrimaryPhone(response) {
                    const status = response.status;
                    let _headers = {};
                    if (response.headers && response.headers.forEach) {
                        response.headers.forEach((v, k) => _headers[k] = v);
                    }
                    ;
                    if (status === 200) {
                        return response.text().then((_responseText) => {
                            let result200 = null;
                            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            result200 = resultData200 ? PhoneQuery.fromJS(resultData200) : new PhoneQuery();
                            return result200;
                        });
                    }
                    else if (status !== 200 && status !== 204) {
                        return response.text().then((_responseText) => {
                            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return Promise.resolve(null);
                }
                /**
                 * Gets a collection of Phone Types
                 * @return Success
                 */
                getPhoneTypes(username, isTypescriptClient) {
                    let url_ = this.baseUrl + "/api/types/phone";
                    url_ = url_.replace(/[?&]$/, "");
                    let options_ = {
                        method: "GET",
                        headers: {
                            "username": username !== undefined && username !== null ? "" + username : "",
                            "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                            "Accept": "application/json"
                        }
                    };
                    return this.http.fetch(url_, options_).then((_response) => {
                        return this.processGetPhoneTypes(_response);
                    });
                }
                processGetPhoneTypes(response) {
                    const status = response.status;
                    let _headers = {};
                    if (response.headers && response.headers.forEach) {
                        response.headers.forEach((v, k) => _headers[k] = v);
                    }
                    ;
                    if (status === 200) {
                        return response.text().then((_responseText) => {
                            let result200 = null;
                            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            if (resultData200 && resultData200.constructor === Array) {
                                result200 = [];
                                for (let item of resultData200)
                                    result200.push(ILookupable.fromJS(item));
                            }
                            return result200;
                        });
                    }
                    else if (status !== 200 && status !== 204) {
                        return response.text().then((_responseText) => {
                            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return Promise.resolve(null);
                }
                /**
                 * Gets a collection of Address Types
                 * @return Success
                 */
                getAddressTypes(username, isTypescriptClient) {
                    let url_ = this.baseUrl + "/api/types/address";
                    url_ = url_.replace(/[?&]$/, "");
                    let options_ = {
                        method: "GET",
                        headers: {
                            "username": username !== undefined && username !== null ? "" + username : "",
                            "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                            "Accept": "application/json"
                        }
                    };
                    return this.http.fetch(url_, options_).then((_response) => {
                        return this.processGetAddressTypes(_response);
                    });
                }
                processGetAddressTypes(response) {
                    const status = response.status;
                    let _headers = {};
                    if (response.headers && response.headers.forEach) {
                        response.headers.forEach((v, k) => _headers[k] = v);
                    }
                    ;
                    if (status === 200) {
                        return response.text().then((_responseText) => {
                            let result200 = null;
                            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            if (resultData200 && resultData200.constructor === Array) {
                                result200 = [];
                                for (let item of resultData200)
                                    result200.push(ILookupable.fromJS(item));
                            }
                            return result200;
                        });
                    }
                    else if (status !== 200 && status !== 204) {
                        return response.text().then((_responseText) => {
                            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return Promise.resolve(null);
                }
                /**
                 * Gets a Collection of States by countryCode
                 * @param countryCode (optional) Example: UNITED STATES
                 * @return Success
                 */
                getStatesTypes(countryCode, username, isTypescriptClient) {
                    let url_ = this.baseUrl + "/api/types/state?";
                    if (countryCode !== undefined)
                        url_ += "countryCode=" + encodeURIComponent("" + countryCode) + "&";
                    url_ = url_.replace(/[?&]$/, "");
                    let options_ = {
                        method: "GET",
                        headers: {
                            "username": username !== undefined && username !== null ? "" + username : "",
                            "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                            "Accept": "application/json"
                        }
                    };
                    return this.http.fetch(url_, options_).then((_response) => {
                        return this.processGetStatesTypes(_response);
                    });
                }
                processGetStatesTypes(response) {
                    const status = response.status;
                    let _headers = {};
                    if (response.headers && response.headers.forEach) {
                        response.headers.forEach((v, k) => _headers[k] = v);
                    }
                    ;
                    if (status === 200) {
                        return response.text().then((_responseText) => {
                            let result200 = null;
                            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            if (resultData200 && resultData200.constructor === Array) {
                                result200 = [];
                                for (let item of resultData200)
                                    result200.push(ILookupable.fromJS(item));
                            }
                            return result200;
                        });
                    }
                    else if (status !== 200 && status !== 204) {
                        return response.text().then((_responseText) => {
                            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return Promise.resolve(null);
                }
                /**
                 * Gets a collection of Countries
                 * @return Success
                 */
                getCountriesTypes(username, isTypescriptClient) {
                    let url_ = this.baseUrl + "/api/types/country";
                    url_ = url_.replace(/[?&]$/, "");
                    let options_ = {
                        method: "GET",
                        headers: {
                            "username": username !== undefined && username !== null ? "" + username : "",
                            "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                            "Accept": "application/json"
                        }
                    };
                    return this.http.fetch(url_, options_).then((_response) => {
                        return this.processGetCountriesTypes(_response);
                    });
                }
                processGetCountriesTypes(response) {
                    const status = response.status;
                    let _headers = {};
                    if (response.headers && response.headers.forEach) {
                        response.headers.forEach((v, k) => _headers[k] = v);
                    }
                    ;
                    if (status === 200) {
                        return response.text().then((_responseText) => {
                            let result200 = null;
                            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            if (resultData200 && resultData200.constructor === Array) {
                                result200 = [];
                                for (let item of resultData200)
                                    result200.push(ILookupable.fromJS(item));
                            }
                            return result200;
                        });
                    }
                    else if (status !== 200 && status !== 204) {
                        return response.text().then((_responseText) => {
                            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return Promise.resolve(null);
                }
                /**
                 * Gets a collection of Email Types
                 * @return Success
                 */
                getEmailTypes(username, isTypescriptClient) {
                    let url_ = this.baseUrl + "/api/types/email";
                    url_ = url_.replace(/[?&]$/, "");
                    let options_ = {
                        method: "GET",
                        headers: {
                            "username": username !== undefined && username !== null ? "" + username : "",
                            "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                            "Accept": "application/json"
                        }
                    };
                    return this.http.fetch(url_, options_).then((_response) => {
                        return this.processGetEmailTypes(_response);
                    });
                }
                processGetEmailTypes(response) {
                    const status = response.status;
                    let _headers = {};
                    if (response.headers && response.headers.forEach) {
                        response.headers.forEach((v, k) => _headers[k] = v);
                    }
                    ;
                    if (status === 200) {
                        return response.text().then((_responseText) => {
                            let result200 = null;
                            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            if (resultData200 && resultData200.constructor === Array) {
                                result200 = [];
                                for (let item of resultData200)
                                    result200.push(ILookupable.fromJS(item));
                            }
                            return result200;
                        });
                    }
                    else if (status !== 200 && status !== 204) {
                        return response.text().then((_responseText) => {
                            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return Promise.resolve(null);
                }
                /**
                 * @return Success
                 */
                getAll(username, isTypescriptClient) {
                    let url_ = this.baseUrl + "/api/customers/Values";
                    url_ = url_.replace(/[?&]$/, "");
                    let options_ = {
                        method: "GET",
                        headers: {
                            "username": username !== undefined && username !== null ? "" + username : "",
                            "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                            "Accept": "application/json"
                        }
                    };
                    return this.http.fetch(url_, options_).then((_response) => {
                        return this.processGetAll(_response);
                    });
                }
                processGetAll(response) {
                    const status = response.status;
                    let _headers = {};
                    if (response.headers && response.headers.forEach) {
                        response.headers.forEach((v, k) => _headers[k] = v);
                    }
                    ;
                    if (status === 200) {
                        return response.text().then((_responseText) => {
                            let result200 = null;
                            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            if (resultData200 && resultData200.constructor === Array) {
                                result200 = [];
                                for (let item of resultData200)
                                    result200.push(item);
                            }
                            return result200;
                        });
                    }
                    else if (status !== 200 && status !== 204) {
                        return response.text().then((_responseText) => {
                            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return Promise.resolve(null);
                }
                /**
                 * @param value (optional)
                 * @return Success
                 */
                post(value, username, isTypescriptClient) {
                    let url_ = this.baseUrl + "/api/customers/Values";
                    url_ = url_.replace(/[?&]$/, "");
                    const content_ = JSON.stringify(value);
                    let options_ = {
                        body: content_,
                        method: "POST",
                        headers: {
                            "username": username !== undefined && username !== null ? "" + username : "",
                            "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                            "Content-Type": "application/json",
                        }
                    };
                    return this.http.fetch(url_, options_).then((_response) => {
                        return this.processPost(_response);
                    });
                }
                processPost(response) {
                    const status = response.status;
                    let _headers = {};
                    if (response.headers && response.headers.forEach) {
                        response.headers.forEach((v, k) => _headers[k] = v);
                    }
                    ;
                    if (status === 200) {
                        return response.text().then((_responseText) => {
                            return;
                        });
                    }
                    else if (status !== 200 && status !== 204) {
                        return response.text().then((_responseText) => {
                            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return Promise.resolve(null);
                }
                /**
                 * @return Success
                 */
                get(id, username, isTypescriptClient) {
                    let url_ = this.baseUrl + "/api/customers/Values/{id}";
                    if (id === undefined || id === null)
                        throw new Error("The parameter 'id' must be defined.");
                    url_ = url_.replace("{id}", encodeURIComponent("" + id));
                    url_ = url_.replace(/[?&]$/, "");
                    let options_ = {
                        method: "GET",
                        headers: {
                            "username": username !== undefined && username !== null ? "" + username : "",
                            "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                            "Accept": "application/json"
                        }
                    };
                    return this.http.fetch(url_, options_).then((_response) => {
                        return this.processGet(_response);
                    });
                }
                processGet(response) {
                    const status = response.status;
                    let _headers = {};
                    if (response.headers && response.headers.forEach) {
                        response.headers.forEach((v, k) => _headers[k] = v);
                    }
                    ;
                    if (status === 200) {
                        return response.text().then((_responseText) => {
                            let result200 = null;
                            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                            result200 = resultData200 !== undefined ? resultData200 : null;
                            return result200;
                        });
                    }
                    else if (status !== 200 && status !== 204) {
                        return response.text().then((_responseText) => {
                            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return Promise.resolve(null);
                }
                /**
                 * @param value (optional)
                 * @return Success
                 */
                put(id, value, username, isTypescriptClient) {
                    let url_ = this.baseUrl + "/api/customers/Values/{id}";
                    if (id === undefined || id === null)
                        throw new Error("The parameter 'id' must be defined.");
                    url_ = url_.replace("{id}", encodeURIComponent("" + id));
                    url_ = url_.replace(/[?&]$/, "");
                    const content_ = JSON.stringify(value);
                    let options_ = {
                        body: content_,
                        method: "PUT",
                        headers: {
                            "username": username !== undefined && username !== null ? "" + username : "",
                            "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                            "Content-Type": "application/json",
                        }
                    };
                    return this.http.fetch(url_, options_).then((_response) => {
                        return this.processPut(_response);
                    });
                }
                processPut(response) {
                    const status = response.status;
                    let _headers = {};
                    if (response.headers && response.headers.forEach) {
                        response.headers.forEach((v, k) => _headers[k] = v);
                    }
                    ;
                    if (status === 200) {
                        return response.text().then((_responseText) => {
                            return;
                        });
                    }
                    else if (status !== 200 && status !== 204) {
                        return response.text().then((_responseText) => {
                            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return Promise.resolve(null);
                }
                /**
                 * @return Success
                 */
                delete(id, username, isTypescriptClient) {
                    let url_ = this.baseUrl + "/api/customers/Values/{id}";
                    if (id === undefined || id === null)
                        throw new Error("The parameter 'id' must be defined.");
                    url_ = url_.replace("{id}", encodeURIComponent("" + id));
                    url_ = url_.replace(/[?&]$/, "");
                    let options_ = {
                        method: "DELETE",
                        headers: {
                            "username": username !== undefined && username !== null ? "" + username : "",
                            "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                        }
                    };
                    return this.http.fetch(url_, options_).then((_response) => {
                        return this.processDelete(_response);
                    });
                }
                processDelete(response) {
                    const status = response.status;
                    let _headers = {};
                    if (response.headers && response.headers.forEach) {
                        response.headers.forEach((v, k) => _headers[k] = v);
                    }
                    ;
                    if (status === 200) {
                        return response.text().then((_responseText) => {
                            return;
                        });
                    }
                    else if (status !== 200 && status !== 204) {
                        return response.text().then((_responseText) => {
                            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                        });
                    }
                    return Promise.resolve(null);
                }
            };
            exports_1("Client", Client);
            AddressQuery = class AddressQuery {
                constructor(data) {
                    if (data) {
                        for (var property in data) {
                            if (data.hasOwnProperty(property))
                                this[property] = data[property];
                        }
                    }
                }
                init(data) {
                    if (data) {
                        this.key = data["key"];
                        this.customerKey = data["customerKey"];
                        this.line1 = data["line1"];
                        this.line2 = data["line2"];
                        this.line3 = data["line3"];
                        this.city = data["city"];
                        this.state = data["state"];
                        this.postCode = data["postCode"];
                        this.country = data["country"];
                        this.intlProvince = data["intlProvince"];
                        this.latitude = data["latitude"];
                        this.longitude = data["longitude"];
                        this.attention = data["attention"];
                        this.companyName = data["companyName"];
                        this.addressType = data["addressType"];
                        this.isBad = data["isBad"];
                        this.isPrimary = data["isPrimary"];
                        this.isDeleted = data["isDeleted"];
                        this.addDate = data["addDate"] ? new Date(data["addDate"].toString()) : undefined;
                        this.changeDate = data["changeDate"] ? new Date(data["changeDate"].toString()) : undefined;
                    }
                }
                static fromJS(data) {
                    data = typeof data === 'object' ? data : {};
                    let result = new AddressQuery();
                    result.init(data);
                    return result;
                }
                toJSON(data) {
                    data = typeof data === 'object' ? data : {};
                    data["key"] = this.key;
                    data["customerKey"] = this.customerKey;
                    data["line1"] = this.line1;
                    data["line2"] = this.line2;
                    data["line3"] = this.line3;
                    data["city"] = this.city;
                    data["state"] = this.state;
                    data["postCode"] = this.postCode;
                    data["country"] = this.country;
                    data["intlProvince"] = this.intlProvince;
                    data["latitude"] = this.latitude;
                    data["longitude"] = this.longitude;
                    data["attention"] = this.attention;
                    data["companyName"] = this.companyName;
                    data["addressType"] = this.addressType;
                    data["isBad"] = this.isBad;
                    data["isPrimary"] = this.isPrimary;
                    data["isDeleted"] = this.isDeleted;
                    data["addDate"] = this.addDate ? this.addDate.toISOString() : undefined;
                    data["changeDate"] = this.changeDate ? this.changeDate.toISOString() : undefined;
                    return data;
                }
            };
            exports_1("AddressQuery", AddressQuery);
            Address = class Address {
                constructor(data) {
                    if (data) {
                        for (var property in data) {
                            if (data.hasOwnProperty(property))
                                this[property] = data[property];
                        }
                    }
                }
                init(data) {
                    if (data) {
                        this.key = data["key"];
                        this.customerKey = data["customerKey"];
                        this.line1 = data["line1"];
                        this.line2 = data["line2"];
                        this.line3 = data["line3"];
                        this.city = data["city"];
                        this.state = data["state"];
                        this.postCode = data["postCode"];
                        this.country = data["country"];
                        this.intlProvince = data["intlProvince"];
                        this.latitude = data["latitude"];
                        this.longitude = data["longitude"];
                        this.attention = data["attention"];
                        this.companyName = data["companyName"];
                        this.addressType = data["addressType"];
                        this.isBad = data["isBad"];
                        this.isPrimary = data["isPrimary"];
                        this.isDeleted = data["isDeleted"];
                        this.addDate = data["addDate"] ? new Date(data["addDate"].toString()) : undefined;
                        this.changeDate = data["changeDate"] ? new Date(data["changeDate"].toString()) : undefined;
                    }
                }
                static fromJS(data) {
                    data = typeof data === 'object' ? data : {};
                    let result = new Address();
                    result.init(data);
                    return result;
                }
                toJSON(data) {
                    data = typeof data === 'object' ? data : {};
                    data["key"] = this.key;
                    data["customerKey"] = this.customerKey;
                    data["line1"] = this.line1;
                    data["line2"] = this.line2;
                    data["line3"] = this.line3;
                    data["city"] = this.city;
                    data["state"] = this.state;
                    data["postCode"] = this.postCode;
                    data["country"] = this.country;
                    data["intlProvince"] = this.intlProvince;
                    data["latitude"] = this.latitude;
                    data["longitude"] = this.longitude;
                    data["attention"] = this.attention;
                    data["companyName"] = this.companyName;
                    data["addressType"] = this.addressType;
                    data["isBad"] = this.isBad;
                    data["isPrimary"] = this.isPrimary;
                    data["isDeleted"] = this.isDeleted;
                    data["addDate"] = this.addDate ? this.addDate.toISOString() : undefined;
                    data["changeDate"] = this.changeDate ? this.changeDate.toISOString() : undefined;
                    return data;
                }
            };
            exports_1("Address", Address);
            DtoResponseWrapperOfBoolean = class DtoResponseWrapperOfBoolean {
                constructor(data) {
                    if (data) {
                        for (var property in data) {
                            if (data.hasOwnProperty(property))
                                this[property] = data[property];
                        }
                    }
                }
                init(data) {
                    if (data) {
                        this.result = data["result"];
                        if (data["errors"] && data["errors"].constructor === Array) {
                            this.errors = [];
                            for (let item of data["errors"])
                                this.errors.push(KeyValuePairOfStringAndString.fromJS(item));
                        }
                        if (data["warnings"] && data["warnings"].constructor === Array) {
                            this.warnings = [];
                            for (let item of data["warnings"])
                                this.warnings.push(KeyValuePairOfStringAndString.fromJS(item));
                        }
                        this.errorInfo = data["errorInfo"] ? ErrorInfo.fromJS(data["errorInfo"]) : undefined;
                    }
                }
                static fromJS(data) {
                    data = typeof data === 'object' ? data : {};
                    let result = new DtoResponseWrapperOfBoolean();
                    result.init(data);
                    return result;
                }
                toJSON(data) {
                    data = typeof data === 'object' ? data : {};
                    data["result"] = this.result;
                    if (this.errors && this.errors.constructor === Array) {
                        data["errors"] = [];
                        for (let item of this.errors)
                            data["errors"].push(item.toJSON());
                    }
                    if (this.warnings && this.warnings.constructor === Array) {
                        data["warnings"] = [];
                        for (let item of this.warnings)
                            data["warnings"].push(item.toJSON());
                    }
                    data["errorInfo"] = this.errorInfo ? this.errorInfo.toJSON() : undefined;
                    return data;
                }
            };
            exports_1("DtoResponseWrapperOfBoolean", DtoResponseWrapperOfBoolean);
            KeyValuePairOfStringAndString = class KeyValuePairOfStringAndString {
                constructor(data) {
                    if (data) {
                        for (var property in data) {
                            if (data.hasOwnProperty(property))
                                this[property] = data[property];
                        }
                    }
                }
                init(data) {
                    if (data) {
                        this.key = data["key"];
                        this.value = data["value"];
                    }
                }
                static fromJS(data) {
                    data = typeof data === 'object' ? data : {};
                    let result = new KeyValuePairOfStringAndString();
                    result.init(data);
                    return result;
                }
                toJSON(data) {
                    data = typeof data === 'object' ? data : {};
                    data["key"] = this.key;
                    data["value"] = this.value;
                    return data;
                }
            };
            exports_1("KeyValuePairOfStringAndString", KeyValuePairOfStringAndString);
            ErrorInfo = class ErrorInfo {
                constructor(data) {
                    if (data) {
                        for (var property in data) {
                            if (data.hasOwnProperty(property))
                                this[property] = data[property];
                        }
                    }
                }
                init(data) {
                    if (data) {
                        this.errorCode = data["errorCode"];
                        this.errorName = data["errorName"];
                        this.errorDescription = data["errorDescription"];
                        this.userErrorCode = data["userErrorCode"];
                        this.userErrorMessage = data["userErrorMessage"];
                        this.type = data["type"];
                        this.username = data["username"];
                        this.timeStamp = data["timeStamp"];
                        this.exceptionDetails = data["exceptionDetails"];
                        this.method = data["method"];
                    }
                }
                static fromJS(data) {
                    data = typeof data === 'object' ? data : {};
                    let result = new ErrorInfo();
                    result.init(data);
                    return result;
                }
                toJSON(data) {
                    data = typeof data === 'object' ? data : {};
                    data["errorCode"] = this.errorCode;
                    data["errorName"] = this.errorName;
                    data["errorDescription"] = this.errorDescription;
                    data["userErrorCode"] = this.userErrorCode;
                    data["userErrorMessage"] = this.userErrorMessage;
                    data["type"] = this.type;
                    data["username"] = this.username;
                    data["timeStamp"] = this.timeStamp;
                    data["exceptionDetails"] = this.exceptionDetails;
                    data["method"] = this.method;
                    return data;
                }
            };
            exports_1("ErrorInfo", ErrorInfo);
            DtoResponseWrapperOfGuid = class DtoResponseWrapperOfGuid {
                constructor(data) {
                    if (data) {
                        for (var property in data) {
                            if (data.hasOwnProperty(property))
                                this[property] = data[property];
                        }
                    }
                }
                init(data) {
                    if (data) {
                        this.result = data["result"];
                        if (data["errors"] && data["errors"].constructor === Array) {
                            this.errors = [];
                            for (let item of data["errors"])
                                this.errors.push(KeyValuePairOfStringAndString.fromJS(item));
                        }
                        if (data["warnings"] && data["warnings"].constructor === Array) {
                            this.warnings = [];
                            for (let item of data["warnings"])
                                this.warnings.push(KeyValuePairOfStringAndString.fromJS(item));
                        }
                        this.errorInfo = data["errorInfo"] ? ErrorInfo.fromJS(data["errorInfo"]) : undefined;
                    }
                }
                static fromJS(data) {
                    data = typeof data === 'object' ? data : {};
                    let result = new DtoResponseWrapperOfGuid();
                    result.init(data);
                    return result;
                }
                toJSON(data) {
                    data = typeof data === 'object' ? data : {};
                    data["result"] = this.result;
                    if (this.errors && this.errors.constructor === Array) {
                        data["errors"] = [];
                        for (let item of this.errors)
                            data["errors"].push(item.toJSON());
                    }
                    if (this.warnings && this.warnings.constructor === Array) {
                        data["warnings"] = [];
                        for (let item of this.warnings)
                            data["warnings"].push(item.toJSON());
                    }
                    data["errorInfo"] = this.errorInfo ? this.errorInfo.toJSON() : undefined;
                    return data;
                }
            };
            exports_1("DtoResponseWrapperOfGuid", DtoResponseWrapperOfGuid);
            EmailAddressQuery = class EmailAddressQuery {
                constructor(data) {
                    if (data) {
                        for (var property in data) {
                            if (data.hasOwnProperty(property))
                                this[property] = data[property];
                        }
                    }
                }
                init(data) {
                    if (data) {
                        this.key = data["key"];
                        this.emailAddress = data["emailAddress"];
                        this.customerKey = data["customerKey"];
                        this.type = data["type"];
                        this.isInvalid = data["isInvalid"];
                        this.isInvalidReason = data["isInvalidReason"];
                        this.isUnlisted = data["isUnlisted"];
                        this.isDeleted = data["isDeleted"];
                        this.addDate = data["addDate"] ? new Date(data["addDate"].toString()) : undefined;
                        this.changeDate = data["changeDate"] ? new Date(data["changeDate"].toString()) : undefined;
                        this.isPrimary = data["isPrimary"];
                    }
                }
                static fromJS(data) {
                    data = typeof data === 'object' ? data : {};
                    let result = new EmailAddressQuery();
                    result.init(data);
                    return result;
                }
                toJSON(data) {
                    data = typeof data === 'object' ? data : {};
                    data["key"] = this.key;
                    data["emailAddress"] = this.emailAddress;
                    data["customerKey"] = this.customerKey;
                    data["type"] = this.type;
                    data["isInvalid"] = this.isInvalid;
                    data["isInvalidReason"] = this.isInvalidReason;
                    data["isUnlisted"] = this.isUnlisted;
                    data["isDeleted"] = this.isDeleted;
                    data["addDate"] = this.addDate ? this.addDate.toISOString() : undefined;
                    data["changeDate"] = this.changeDate ? this.changeDate.toISOString() : undefined;
                    data["isPrimary"] = this.isPrimary;
                    return data;
                }
            };
            exports_1("EmailAddressQuery", EmailAddressQuery);
            Email = class Email {
                constructor(data) {
                    if (data) {
                        for (var property in data) {
                            if (data.hasOwnProperty(property))
                                this[property] = data[property];
                        }
                    }
                }
                init(data) {
                    if (data) {
                        this.key = data["key"];
                        this.emailAddress = data["emailAddress"];
                        this.customerKey = data["customerKey"];
                        this.type = data["type"];
                        this.isInvalid = data["isInvalid"];
                        this.isInvalidReason = data["isInvalidReason"];
                        this.isUnlisted = data["isUnlisted"];
                        this.isDeleted = data["isDeleted"];
                        this.isPrimary = data["isPrimary"];
                        this.addDate = data["addDate"] ? new Date(data["addDate"].toString()) : undefined;
                        this.changeDate = data["changeDate"] ? new Date(data["changeDate"].toString()) : undefined;
                    }
                }
                static fromJS(data) {
                    data = typeof data === 'object' ? data : {};
                    let result = new Email();
                    result.init(data);
                    return result;
                }
                toJSON(data) {
                    data = typeof data === 'object' ? data : {};
                    data["key"] = this.key;
                    data["emailAddress"] = this.emailAddress;
                    data["customerKey"] = this.customerKey;
                    data["type"] = this.type;
                    data["isInvalid"] = this.isInvalid;
                    data["isInvalidReason"] = this.isInvalidReason;
                    data["isUnlisted"] = this.isUnlisted;
                    data["isDeleted"] = this.isDeleted;
                    data["isPrimary"] = this.isPrimary;
                    data["addDate"] = this.addDate ? this.addDate.toISOString() : undefined;
                    data["changeDate"] = this.changeDate ? this.changeDate.toISOString() : undefined;
                    return data;
                }
            };
            exports_1("Email", Email);
            DtoResponseWrapperOfEmail = class DtoResponseWrapperOfEmail {
                constructor(data) {
                    if (data) {
                        for (var property in data) {
                            if (data.hasOwnProperty(property))
                                this[property] = data[property];
                        }
                    }
                }
                init(data) {
                    if (data) {
                        this.result = data["result"] ? Email.fromJS(data["result"]) : undefined;
                        if (data["errors"] && data["errors"].constructor === Array) {
                            this.errors = [];
                            for (let item of data["errors"])
                                this.errors.push(KeyValuePairOfStringAndString.fromJS(item));
                        }
                        if (data["warnings"] && data["warnings"].constructor === Array) {
                            this.warnings = [];
                            for (let item of data["warnings"])
                                this.warnings.push(KeyValuePairOfStringAndString.fromJS(item));
                        }
                        this.errorInfo = data["errorInfo"] ? ErrorInfo.fromJS(data["errorInfo"]) : undefined;
                    }
                }
                static fromJS(data) {
                    data = typeof data === 'object' ? data : {};
                    let result = new DtoResponseWrapperOfEmail();
                    result.init(data);
                    return result;
                }
                toJSON(data) {
                    data = typeof data === 'object' ? data : {};
                    data["result"] = this.result ? this.result.toJSON() : undefined;
                    if (this.errors && this.errors.constructor === Array) {
                        data["errors"] = [];
                        for (let item of this.errors)
                            data["errors"].push(item.toJSON());
                    }
                    if (this.warnings && this.warnings.constructor === Array) {
                        data["warnings"] = [];
                        for (let item of this.warnings)
                            data["warnings"].push(item.toJSON());
                    }
                    data["errorInfo"] = this.errorInfo ? this.errorInfo.toJSON() : undefined;
                    return data;
                }
            };
            exports_1("DtoResponseWrapperOfEmail", DtoResponseWrapperOfEmail);
            PhoneQuery = class PhoneQuery {
                constructor(data) {
                    if (data) {
                        for (var property in data) {
                            if (data.hasOwnProperty(property))
                                this[property] = data[property];
                        }
                    }
                }
                init(data) {
                    if (data) {
                        this.key = data["key"];
                        this.customerKey = data["customerKey"];
                        this.phoneNo = data["phoneNo"];
                        this.formattedNo = data["formattedNo"];
                        this.countryKey = data["countryKey"];
                        this.countryCode = data["countryCode"];
                        this.addDate = data["addDate"] ? new Date(data["addDate"].toString()) : undefined;
                        this.addUser = data["addUser"];
                        this.changeUser = data["changeUser"];
                        this.changeDate = data["changeDate"] ? new Date(data["changeDate"].toString()) : undefined;
                        this.isPrimary = data["isPrimary"];
                        this.isDeleted = data["isDeleted"];
                        this.phoneType = data["phoneType"];
                        this.phoneExt = data["phoneExt"];
                    }
                }
                static fromJS(data) {
                    data = typeof data === 'object' ? data : {};
                    let result = new PhoneQuery();
                    result.init(data);
                    return result;
                }
                toJSON(data) {
                    data = typeof data === 'object' ? data : {};
                    data["key"] = this.key;
                    data["customerKey"] = this.customerKey;
                    data["phoneNo"] = this.phoneNo;
                    data["formattedNo"] = this.formattedNo;
                    data["countryKey"] = this.countryKey;
                    data["countryCode"] = this.countryCode;
                    data["addDate"] = this.addDate ? this.addDate.toISOString() : undefined;
                    data["addUser"] = this.addUser;
                    data["changeUser"] = this.changeUser;
                    data["changeDate"] = this.changeDate ? this.changeDate.toISOString() : undefined;
                    data["isPrimary"] = this.isPrimary;
                    data["isDeleted"] = this.isDeleted;
                    data["phoneType"] = this.phoneType;
                    data["phoneExt"] = this.phoneExt;
                    return data;
                }
            };
            exports_1("PhoneQuery", PhoneQuery);
            Phone = class Phone {
                constructor(data) {
                    if (data) {
                        for (var property in data) {
                            if (data.hasOwnProperty(property))
                                this[property] = data[property];
                        }
                    }
                }
                init(data) {
                    if (data) {
                        this.key = data["key"];
                        this.countryCode = data["countryCode"];
                        this.customerKey = data["customerKey"];
                        this.formattedNo = data["formattedNo"];
                        this.isDeleted = data["isDeleted"];
                        this.phoneType = data["phoneType"];
                        this.addDate = data["addDate"] ? new Date(data["addDate"].toString()) : undefined;
                        this.changeDate = data["changeDate"] ? new Date(data["changeDate"].toString()) : undefined;
                        this.isPrimary = data["isPrimary"];
                        this.phoneNo = data["phoneNo"];
                        this.phoneExt = data["phoneExt"];
                    }
                }
                static fromJS(data) {
                    data = typeof data === 'object' ? data : {};
                    let result = new Phone();
                    result.init(data);
                    return result;
                }
                toJSON(data) {
                    data = typeof data === 'object' ? data : {};
                    data["key"] = this.key;
                    data["countryCode"] = this.countryCode;
                    data["customerKey"] = this.customerKey;
                    data["formattedNo"] = this.formattedNo;
                    data["isDeleted"] = this.isDeleted;
                    data["phoneType"] = this.phoneType;
                    data["addDate"] = this.addDate ? this.addDate.toISOString() : undefined;
                    data["changeDate"] = this.changeDate ? this.changeDate.toISOString() : undefined;
                    data["isPrimary"] = this.isPrimary;
                    data["phoneNo"] = this.phoneNo;
                    data["phoneExt"] = this.phoneExt;
                    return data;
                }
            };
            exports_1("Phone", Phone);
            DtoResponseWrapperOfPhone = class DtoResponseWrapperOfPhone {
                constructor(data) {
                    if (data) {
                        for (var property in data) {
                            if (data.hasOwnProperty(property))
                                this[property] = data[property];
                        }
                    }
                }
                init(data) {
                    if (data) {
                        this.result = data["result"] ? Phone.fromJS(data["result"]) : undefined;
                        if (data["errors"] && data["errors"].constructor === Array) {
                            this.errors = [];
                            for (let item of data["errors"])
                                this.errors.push(KeyValuePairOfStringAndString.fromJS(item));
                        }
                        if (data["warnings"] && data["warnings"].constructor === Array) {
                            this.warnings = [];
                            for (let item of data["warnings"])
                                this.warnings.push(KeyValuePairOfStringAndString.fromJS(item));
                        }
                        this.errorInfo = data["errorInfo"] ? ErrorInfo.fromJS(data["errorInfo"]) : undefined;
                    }
                }
                static fromJS(data) {
                    data = typeof data === 'object' ? data : {};
                    let result = new DtoResponseWrapperOfPhone();
                    result.init(data);
                    return result;
                }
                toJSON(data) {
                    data = typeof data === 'object' ? data : {};
                    data["result"] = this.result ? this.result.toJSON() : undefined;
                    if (this.errors && this.errors.constructor === Array) {
                        data["errors"] = [];
                        for (let item of this.errors)
                            data["errors"].push(item.toJSON());
                    }
                    if (this.warnings && this.warnings.constructor === Array) {
                        data["warnings"] = [];
                        for (let item of this.warnings)
                            data["warnings"].push(item.toJSON());
                    }
                    data["errorInfo"] = this.errorInfo ? this.errorInfo.toJSON() : undefined;
                    return data;
                }
            };
            exports_1("DtoResponseWrapperOfPhone", DtoResponseWrapperOfPhone);
            ILookupable = class ILookupable {
                constructor(data) {
                    if (data) {
                        for (var property in data) {
                            if (data.hasOwnProperty(property))
                                this[property] = data[property];
                        }
                    }
                }
                init(data) {
                    if (data) {
                        this.display = data["display"];
                        this.key = data["key"];
                    }
                }
                static fromJS(data) {
                    data = typeof data === 'object' ? data : {};
                    let result = new ILookupable();
                    result.init(data);
                    return result;
                }
                toJSON(data) {
                    data = typeof data === 'object' ? data : {};
                    data["display"] = this.display;
                    data["key"] = this.key;
                    return data;
                }
            };
            exports_1("ILookupable", ILookupable);
            SwaggerException = class SwaggerException extends Error {
                constructor(message, status, response, headers, result) {
                    super();
                    this.isSwaggerException = true;
                    this.message = message;
                    this.status = status;
                    this.response = response;
                    this.headers = headers;
                    this.result = result;
                }
                static isSwaggerException(obj) {
                    return obj.isSwaggerException === true;
                }
            };
            exports_1("SwaggerException", SwaggerException);
        }
    };
});

