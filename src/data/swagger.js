"use strict";
/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.13.0 (NJsonSchema v9.13.17.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Client = /** @class */ (function () {
    function Client(baseUrl, http) {
        this.jsonParseReviver = undefined;
        this.http = http ? http : window;
        this.baseUrl = baseUrl ? baseUrl : "";
    }
    /**
     * Get an Individual Customer's Address
    Get Address
     * @param customerKey Customer's Key
     * @param addressKey Address Key
     * @return Success
     */
    Client.prototype.getAddress = function (customerKey, addressKey, username, isTypescriptClient) {
        var _this = this;
        var url_ = this.baseUrl + "/api/customers/{customerKey}/addresses/{addressKey}";
        if (customerKey === undefined || customerKey === null)
            throw new Error("The parameter 'customerKey' must be defined.");
        url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
        if (addressKey === undefined || addressKey === null)
            throw new Error("The parameter 'addressKey' must be defined.");
        url_ = url_.replace("{addressKey}", encodeURIComponent("" + addressKey));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "username": username !== undefined && username !== null ? "" + username : "",
                "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetAddress(_response);
        });
    };
    Client.prototype.processGetAddress = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? AddressQuery.fromJS(resultData200) : new AddressQuery();
                return result200;
            });
        }
        else if (status === 404) {
            return response.text().then(function (_responseText) {
                var result404 = null;
                var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result404 = resultData404 ? AddressQuery.fromJS(resultData404) : new AddressQuery();
                return throwException("A server error occurred.", status, _responseText, _headers, result404);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * Update an Individual Customer's Address
     * @param customerKey Customer's Key
     * @param addressKey Address Key
     * @param address (optional) Address
     * @return Returns the updated as result within DtoResponseWrapper
     */
    Client.prototype.updateAddress = function (customerKey, addressKey, address, username, isTypescriptClient) {
        var _this = this;
        var url_ = this.baseUrl + "/api/customers/{customerKey}/addresses/{addressKey}";
        if (customerKey === undefined || customerKey === null)
            throw new Error("The parameter 'customerKey' must be defined.");
        url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
        if (addressKey === undefined || addressKey === null)
            throw new Error("The parameter 'addressKey' must be defined.");
        url_ = url_.replace("{addressKey}", encodeURIComponent("" + addressKey));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(address);
        var options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "username": username !== undefined && username !== null ? "" + username : "",
                "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processUpdateAddress(_response);
        });
    };
    Client.prototype.processUpdateAddress = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? DtoResponseWrapperOfBoolean.fromJS(resultData200) : new DtoResponseWrapperOfBoolean();
                return result200;
            });
        }
        else if (status === 400) {
            return response.text().then(function (_responseText) {
                var result400 = null;
                var resultData400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result400 = resultData400 ? DtoResponseWrapperOfBoolean.fromJS(resultData400) : new DtoResponseWrapperOfBoolean();
                return throwException("A server error occurred.", status, _responseText, _headers, result400);
            });
        }
        else if (status === 500) {
            return response.text().then(function (_responseText) {
                var result500 = null;
                var resultData500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result500 = resultData500 ? DtoResponseWrapperOfBoolean.fromJS(resultData500) : new DtoResponseWrapperOfBoolean();
                return throwException("A server error occurred.", status, _responseText, _headers, result500);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * Delete an Individual Customer's Address
     * @param customerKey Customer's Key
     * @param addressKey Address Key
     * @return Success
     */
    Client.prototype.deleteAddress = function (customerKey, addressKey, username, isTypescriptClient) {
        var _this = this;
        var url_ = this.baseUrl + "/api/customers/{customerKey}/addresses/{addressKey}";
        if (customerKey === undefined || customerKey === null)
            throw new Error("The parameter 'customerKey' must be defined.");
        url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
        if (addressKey === undefined || addressKey === null)
            throw new Error("The parameter 'addressKey' must be defined.");
        url_ = url_.replace("{addressKey}", encodeURIComponent("" + addressKey));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "DELETE",
            headers: {
                "username": username !== undefined && username !== null ? "" + username : "",
                "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processDeleteAddress(_response);
        });
    };
    Client.prototype.processDeleteAddress = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? DtoResponseWrapperOfBoolean.fromJS(resultData200) : new DtoResponseWrapperOfBoolean();
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * Get a collection of Individual Customer's Addresseses
     * @param customerKey Customer's Key
     * @return Success
     */
    Client.prototype.getAddresses = function (customerKey, username, isTypescriptClient) {
        var _this = this;
        var url_ = this.baseUrl + "/api/customers/{customerKey}/addresses";
        if (customerKey === undefined || customerKey === null)
            throw new Error("The parameter 'customerKey' must be defined.");
        url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "username": username !== undefined && username !== null ? "" + username : "",
                "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetAddresses(_response);
        });
    };
    Client.prototype.processGetAddresses = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_1 = resultData200; _i < resultData200_1.length; _i++) {
                        var item = resultData200_1[_i];
                        result200.push(AddressQuery.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (status === 404) {
            return response.text().then(function (_responseText) {
                var result404 = null;
                var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result404 = resultData404 ? AddressQuery.fromJS(resultData404) : new AddressQuery();
                return throwException("A server error occurred.", status, _responseText, _headers, result404);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * Creates an Individual Customer's Address
     * @param customerKey Customer Key
     * @param address (optional) Address
     * @return Success
     */
    Client.prototype.addAddress = function (customerKey, address, username, isTypescriptClient) {
        var _this = this;
        var url_ = this.baseUrl + "/api/customers/{customerKey}/addresses";
        if (customerKey === undefined || customerKey === null)
            throw new Error("The parameter 'customerKey' must be defined.");
        url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(address);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "username": username !== undefined && username !== null ? "" + username : "",
                "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processAddAddress(_response);
        });
    };
    Client.prototype.processAddAddress = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? DtoResponseWrapperOfGuid.fromJS(resultData200) : new DtoResponseWrapperOfGuid();
                return result200;
            });
        }
        else if (status === 201) {
            return response.text().then(function (_responseText) {
                var result201 = null;
                var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result201 = resultData201 ? DtoResponseWrapperOfGuid.fromJS(resultData201) : new DtoResponseWrapperOfGuid();
                return result201;
            });
        }
        else if (status === 400) {
            return response.text().then(function (_responseText) {
                return throwException("A server error occurred.", status, _responseText, _headers);
            });
        }
        else if (status === 500) {
            return response.text().then(function (_responseText) {
                return throwException("A server error occurred.", status, _responseText, _headers);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * Get an single Individual Customer's Primary Address
     * @param customerKey Customer Key
     * @return Success
     */
    Client.prototype.getPrimaryAddress = function (customerKey, username, isTypescriptClient) {
        var _this = this;
        var url_ = this.baseUrl + "/api/customers/{customerKey}/addresses/primary";
        if (customerKey === undefined || customerKey === null)
            throw new Error("The parameter 'customerKey' must be defined.");
        url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "username": username !== undefined && username !== null ? "" + username : "",
                "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetPrimaryAddress(_response);
        });
    };
    Client.prototype.processGetPrimaryAddress = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? AddressQuery.fromJS(resultData200) : new AddressQuery();
                return result200;
            });
        }
        else if (status === 404) {
            return response.text().then(function (_responseText) {
                var result404 = null;
                var resultData404 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result404 = resultData404 ? AddressQuery.fromJS(resultData404) : new AddressQuery();
                return throwException("A server error occurred.", status, _responseText, _headers, result404);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * Gets and Individual Customers Email Address
     * @param customerKey Customer Key
     * @param emailAddressKey Email Address Key
     * @return Success
     */
    Client.prototype.getEmailAddress = function (customerKey, emailAddressKey, username, isTypescriptClient) {
        var _this = this;
        var url_ = this.baseUrl + "/api/customers/{customerKey}/emailaddresses/{emailAddressKey}";
        if (customerKey === undefined || customerKey === null)
            throw new Error("The parameter 'customerKey' must be defined.");
        url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
        if (emailAddressKey === undefined || emailAddressKey === null)
            throw new Error("The parameter 'emailAddressKey' must be defined.");
        url_ = url_.replace("{emailAddressKey}", encodeURIComponent("" + emailAddressKey));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "username": username !== undefined && username !== null ? "" + username : "",
                "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetEmailAddress(_response);
        });
    };
    Client.prototype.processGetEmailAddress = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? EmailAddressQuery.fromJS(resultData200) : new EmailAddressQuery();
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * Updates an Individual Customer's Email Address
     * @param customerKey Customers Key
     * @param emailAddressKey Email Address Key
     * @param emailAddress (optional) Email Address
     * @return Success
     */
    Client.prototype.updateEmailAddress = function (customerKey, emailAddressKey, emailAddress, username, isTypescriptClient) {
        var _this = this;
        var url_ = this.baseUrl + "/api/customers/{customerKey}/emailaddresses/{emailAddressKey}";
        if (customerKey === undefined || customerKey === null)
            throw new Error("The parameter 'customerKey' must be defined.");
        url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
        if (emailAddressKey === undefined || emailAddressKey === null)
            throw new Error("The parameter 'emailAddressKey' must be defined.");
        url_ = url_.replace("{emailAddressKey}", encodeURIComponent("" + emailAddressKey));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(emailAddress);
        var options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "username": username !== undefined && username !== null ? "" + username : "",
                "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processUpdateEmailAddress(_response);
        });
    };
    Client.prototype.processUpdateEmailAddress = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? DtoResponseWrapperOfEmail.fromJS(resultData200) : new DtoResponseWrapperOfEmail();
                return result200;
            });
        }
        else if (status === 400) {
            return response.text().then(function (_responseText) {
                var result400 = null;
                var resultData400 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result400 = resultData400 ? DtoResponseWrapperOfBoolean.fromJS(resultData400) : new DtoResponseWrapperOfBoolean();
                return throwException("A server error occurred.", status, _responseText, _headers, result400);
            });
        }
        else if (status === 500) {
            return response.text().then(function (_responseText) {
                var result500 = null;
                var resultData500 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result500 = resultData500 ? DtoResponseWrapperOfBoolean.fromJS(resultData500) : new DtoResponseWrapperOfBoolean();
                return throwException("A server error occurred.", status, _responseText, _headers, result500);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * Deletes an Individual Customer's Email address
     * @param customerKey Customer Key
     * @param emailAddressKey Email Address Key
     * @return Success
     */
    Client.prototype.deleteEmailAddress = function (customerKey, emailAddressKey, username, isTypescriptClient) {
        var _this = this;
        var url_ = this.baseUrl + "/api/customers/{customerKey}/emailaddresses/{emailAddressKey}";
        if (customerKey === undefined || customerKey === null)
            throw new Error("The parameter 'customerKey' must be defined.");
        url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
        if (emailAddressKey === undefined || emailAddressKey === null)
            throw new Error("The parameter 'emailAddressKey' must be defined.");
        url_ = url_.replace("{emailAddressKey}", encodeURIComponent("" + emailAddressKey));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "DELETE",
            headers: {
                "username": username !== undefined && username !== null ? "" + username : "",
                "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processDeleteEmailAddress(_response);
        });
    };
    Client.prototype.processDeleteEmailAddress = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? DtoResponseWrapperOfBoolean.fromJS(resultData200) : new DtoResponseWrapperOfBoolean();
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * Gets the Individual Customer's primary email address by CustomerKey
     * @param customerKey Customer Key
     * @return Success
     */
    Client.prototype.getEmailAddressPrimary = function (customerKey, username, isTypescriptClient) {
        var _this = this;
        var url_ = this.baseUrl + "/api/customers/{customerKey}/emailaddresses/primary";
        if (customerKey === undefined || customerKey === null)
            throw new Error("The parameter 'customerKey' must be defined.");
        url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "username": username !== undefined && username !== null ? "" + username : "",
                "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetEmailAddressPrimary(_response);
        });
    };
    Client.prototype.processGetEmailAddressPrimary = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? EmailAddressQuery.fromJS(resultData200) : new EmailAddressQuery();
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @return Success
     */
    Client.prototype.getEmailAddresses = function (customerKey, username, isTypescriptClient) {
        var _this = this;
        var url_ = this.baseUrl + "/api/customers/{customerKey}/emailaddresses";
        if (customerKey === undefined || customerKey === null)
            throw new Error("The parameter 'customerKey' must be defined.");
        url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "username": username !== undefined && username !== null ? "" + username : "",
                "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetEmailAddresses(_response);
        });
    };
    Client.prototype.processGetEmailAddresses = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_2 = resultData200; _i < resultData200_2.length; _i++) {
                        var item = resultData200_2[_i];
                        result200.push(EmailAddressQuery.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * Adds an new Individual Customer Email Address
     * @param customerKey Customer's Key
     * @param emailAddress (optional) Email Address
     * @return Success
     */
    Client.prototype.addEmailAddress = function (customerKey, emailAddress, username, isTypescriptClient) {
        var _this = this;
        var url_ = this.baseUrl + "/api/customers/{customerKey}/emailaddresses";
        if (customerKey === undefined || customerKey === null)
            throw new Error("The parameter 'customerKey' must be defined.");
        url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(emailAddress);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "username": username !== undefined && username !== null ? "" + username : "",
                "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processAddEmailAddress(_response);
        });
    };
    Client.prototype.processAddEmailAddress = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? DtoResponseWrapperOfEmail.fromJS(resultData200) : new DtoResponseWrapperOfEmail();
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * Get an individual customers phone number
     * @param customerKey Customer Key
     * @param phoneKey Phone Key
     * @return Success
     */
    Client.prototype.getPhone = function (customerKey, phoneKey, username, isTypescriptClient) {
        var _this = this;
        var url_ = this.baseUrl + "/api/customers/{customerKey}/phones/{phoneKey}";
        if (customerKey === undefined || customerKey === null)
            throw new Error("The parameter 'customerKey' must be defined.");
        url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
        if (phoneKey === undefined || phoneKey === null)
            throw new Error("The parameter 'phoneKey' must be defined.");
        url_ = url_.replace("{phoneKey}", encodeURIComponent("" + phoneKey));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "username": username !== undefined && username !== null ? "" + username : "",
                "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetPhone(_response);
        });
    };
    Client.prototype.processGetPhone = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PhoneQuery.fromJS(resultData200) : new PhoneQuery();
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * Update an Individual Customer's Phone Number
     * @param customerKey Customer Phone Number
     * @param phoneKey Phone Key
     * @param phone (optional) Phone
     * @return Returns the newly created phone as result within DtoResponseWrapper
     */
    Client.prototype.updatePhone = function (customerKey, phoneKey, phone, username, isTypescriptClient) {
        var _this = this;
        var url_ = this.baseUrl + "/api/customers/{customerKey}/phones/{phoneKey}";
        if (customerKey === undefined || customerKey === null)
            throw new Error("The parameter 'customerKey' must be defined.");
        url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
        if (phoneKey === undefined || phoneKey === null)
            throw new Error("The parameter 'phoneKey' must be defined.");
        url_ = url_.replace("{phoneKey}", encodeURIComponent("" + phoneKey));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(phone);
        var options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "username": username !== undefined && username !== null ? "" + username : "",
                "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processUpdatePhone(_response);
        });
    };
    Client.prototype.processUpdatePhone = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? DtoResponseWrapperOfPhone.fromJS(resultData200) : new DtoResponseWrapperOfPhone();
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * Deletes an Individual Customer's Phone Number
     * @param customerKey Customer's Key
     * @param phoneKey Phone Key
     * @return Success
     */
    Client.prototype.deletePhone = function (customerKey, phoneKey, username, isTypescriptClient) {
        var _this = this;
        var url_ = this.baseUrl + "/api/customers/{customerKey}/phones/{phoneKey}";
        if (customerKey === undefined || customerKey === null)
            throw new Error("The parameter 'customerKey' must be defined.");
        url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
        if (phoneKey === undefined || phoneKey === null)
            throw new Error("The parameter 'phoneKey' must be defined.");
        url_ = url_.replace("{phoneKey}", encodeURIComponent("" + phoneKey));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "DELETE",
            headers: {
                "username": username !== undefined && username !== null ? "" + username : "",
                "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processDeletePhone(_response);
        });
    };
    Client.prototype.processDeletePhone = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? DtoResponseWrapperOfBoolean.fromJS(resultData200) : new DtoResponseWrapperOfBoolean();
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * Gets a collection of Individual Customer's Phone Numbers
     * @param customerKey Customer's Key
     * @return Success
     */
    Client.prototype.getPhones = function (customerKey, username, isTypescriptClient) {
        var _this = this;
        var url_ = this.baseUrl + "/api/customers/{customerKey}/phones";
        if (customerKey === undefined || customerKey === null)
            throw new Error("The parameter 'customerKey' must be defined.");
        url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "username": username !== undefined && username !== null ? "" + username : "",
                "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetPhones(_response);
        });
    };
    Client.prototype.processGetPhones = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_3 = resultData200; _i < resultData200_3.length; _i++) {
                        var item = resultData200_3[_i];
                        result200.push(PhoneQuery.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * Adds a Individual Customer's Phone Number
     * @param customerKey Individual Customer's Key
     * @param phone (optional) Phone
     * @return Returns the newly created phone as result within DtoResponseWrapper
     */
    Client.prototype.addPhone = function (customerKey, phone, username, isTypescriptClient) {
        var _this = this;
        var url_ = this.baseUrl + "/api/customers/{customerKey}/phones";
        if (customerKey === undefined || customerKey === null)
            throw new Error("The parameter 'customerKey' must be defined.");
        url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(phone);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "username": username !== undefined && username !== null ? "" + username : "",
                "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processAddPhone(_response);
        });
    };
    Client.prototype.processAddPhone = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? DtoResponseWrapperOfPhone.fromJS(resultData200) : new DtoResponseWrapperOfPhone();
                return result200;
            });
        }
        else if (status === 201) {
            return response.text().then(function (_responseText) {
                var result201 = null;
                var resultData201 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result201 = resultData201 ? DtoResponseWrapperOfGuid.fromJS(resultData201) : new DtoResponseWrapperOfGuid();
                return throwException("A server error occurred.", status, _responseText, _headers, result201);
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * Gets an Individual Customers Primary Phone Number
     * @param customerKey Customer's Key
     * @return Success
     */
    Client.prototype.getPrimaryPhone = function (customerKey, username, isTypescriptClient) {
        var _this = this;
        var url_ = this.baseUrl + "/api/customers/{customerKey}/phones/primary";
        if (customerKey === undefined || customerKey === null)
            throw new Error("The parameter 'customerKey' must be defined.");
        url_ = url_.replace("{customerKey}", encodeURIComponent("" + customerKey));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "username": username !== undefined && username !== null ? "" + username : "",
                "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetPrimaryPhone(_response);
        });
    };
    Client.prototype.processGetPrimaryPhone = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 ? PhoneQuery.fromJS(resultData200) : new PhoneQuery();
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * Gets a collection of Phone Types
     * @return Success
     */
    Client.prototype.getPhoneTypes = function (username, isTypescriptClient) {
        var _this = this;
        var url_ = this.baseUrl + "/api/types/phone";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "username": username !== undefined && username !== null ? "" + username : "",
                "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetPhoneTypes(_response);
        });
    };
    Client.prototype.processGetPhoneTypes = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_4 = resultData200; _i < resultData200_4.length; _i++) {
                        var item = resultData200_4[_i];
                        result200.push(ILookupable.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * Gets a collection of Address Types
     * @return Success
     */
    Client.prototype.getAddressTypes = function (username, isTypescriptClient) {
        var _this = this;
        var url_ = this.baseUrl + "/api/types/address";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "username": username !== undefined && username !== null ? "" + username : "",
                "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetAddressTypes(_response);
        });
    };
    Client.prototype.processGetAddressTypes = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_5 = resultData200; _i < resultData200_5.length; _i++) {
                        var item = resultData200_5[_i];
                        result200.push(ILookupable.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * Gets a Collection of States by countryCode
     * @param countryCode (optional) Example: UNITED STATES
     * @return Success
     */
    Client.prototype.getStatesTypes = function (countryCode, username, isTypescriptClient) {
        var _this = this;
        var url_ = this.baseUrl + "/api/types/state?";
        if (countryCode !== undefined)
            url_ += "countryCode=" + encodeURIComponent("" + countryCode) + "&";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "username": username !== undefined && username !== null ? "" + username : "",
                "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetStatesTypes(_response);
        });
    };
    Client.prototype.processGetStatesTypes = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_6 = resultData200; _i < resultData200_6.length; _i++) {
                        var item = resultData200_6[_i];
                        result200.push(ILookupable.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * Gets a collection of Countries
     * @return Success
     */
    Client.prototype.getCountriesTypes = function (username, isTypescriptClient) {
        var _this = this;
        var url_ = this.baseUrl + "/api/types/country";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "username": username !== undefined && username !== null ? "" + username : "",
                "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetCountriesTypes(_response);
        });
    };
    Client.prototype.processGetCountriesTypes = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_7 = resultData200; _i < resultData200_7.length; _i++) {
                        var item = resultData200_7[_i];
                        result200.push(ILookupable.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * Gets a collection of Email Types
     * @return Success
     */
    Client.prototype.getEmailTypes = function (username, isTypescriptClient) {
        var _this = this;
        var url_ = this.baseUrl + "/api/types/email";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "username": username !== undefined && username !== null ? "" + username : "",
                "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetEmailTypes(_response);
        });
    };
    Client.prototype.processGetEmailTypes = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_8 = resultData200; _i < resultData200_8.length; _i++) {
                        var item = resultData200_8[_i];
                        result200.push(ILookupable.fromJS(item));
                    }
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @return Success
     */
    Client.prototype.getAll = function (username, isTypescriptClient) {
        var _this = this;
        var url_ = this.baseUrl + "/api/customers/Values";
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "username": username !== undefined && username !== null ? "" + username : "",
                "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGetAll(_response);
        });
    };
    Client.prototype.processGetAll = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                if (resultData200 && resultData200.constructor === Array) {
                    result200 = [];
                    for (var _i = 0, resultData200_9 = resultData200; _i < resultData200_9.length; _i++) {
                        var item = resultData200_9[_i];
                        result200.push(item);
                    }
                }
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @param value (optional)
     * @return Success
     */
    Client.prototype.post = function (value, username, isTypescriptClient) {
        var _this = this;
        var url_ = this.baseUrl + "/api/customers/Values";
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(value);
        var options_ = {
            body: content_,
            method: "POST",
            headers: {
                "username": username !== undefined && username !== null ? "" + username : "",
                "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                "Content-Type": "application/json",
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processPost(_response);
        });
    };
    Client.prototype.processPost = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                return;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @return Success
     */
    Client.prototype.get = function (id, username, isTypescriptClient) {
        var _this = this;
        var url_ = this.baseUrl + "/api/customers/Values/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "GET",
            headers: {
                "username": username !== undefined && username !== null ? "" + username : "",
                "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                "Accept": "application/json"
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processGet(_response);
        });
    };
    Client.prototype.processGet = function (response) {
        var _this = this;
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                var result200 = null;
                var resultData200 = _responseText === "" ? null : JSON.parse(_responseText, _this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : null;
                return result200;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @param value (optional)
     * @return Success
     */
    Client.prototype.put = function (id, value, username, isTypescriptClient) {
        var _this = this;
        var url_ = this.baseUrl + "/api/customers/Values/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var content_ = JSON.stringify(value);
        var options_ = {
            body: content_,
            method: "PUT",
            headers: {
                "username": username !== undefined && username !== null ? "" + username : "",
                "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
                "Content-Type": "application/json",
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processPut(_response);
        });
    };
    Client.prototype.processPut = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                return;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    /**
     * @return Success
     */
    Client.prototype.delete = function (id, username, isTypescriptClient) {
        var _this = this;
        var url_ = this.baseUrl + "/api/customers/Values/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");
        var options_ = {
            method: "DELETE",
            headers: {
                "username": username !== undefined && username !== null ? "" + username : "",
                "isTypescriptClient": isTypescriptClient !== undefined && isTypescriptClient !== null ? "" + isTypescriptClient : "",
            }
        };
        return this.http.fetch(url_, options_).then(function (_response) {
            return _this.processDelete(_response);
        });
    };
    Client.prototype.processDelete = function (response) {
        var status = response.status;
        var _headers = {};
        if (response.headers && response.headers.forEach) {
            response.headers.forEach(function (v, k) { return _headers[k] = v; });
        }
        ;
        if (status === 200) {
            return response.text().then(function (_responseText) {
                return;
            });
        }
        else if (status !== 200 && status !== 204) {
            return response.text().then(function (_responseText) {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve(null);
    };
    return Client;
}());
exports.Client = Client;
var AddressQuery = /** @class */ (function () {
    function AddressQuery(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    AddressQuery.prototype.init = function (data) {
        if (data) {
            this.key = data["key"];
            this.customerKey = data["customerKey"];
            this.line1 = data["line1"];
            this.line2 = data["line2"];
            this.line3 = data["line3"];
            this.city = data["city"];
            this.state = data["state"];
            this.postCode = data["postCode"];
            this.country = data["country"];
            this.intlProvince = data["intlProvince"];
            this.latitude = data["latitude"];
            this.longitude = data["longitude"];
            this.attention = data["attention"];
            this.companyName = data["companyName"];
            this.addressType = data["addressType"];
            this.isBad = data["isBad"];
            this.isPrimary = data["isPrimary"];
            this.isDeleted = data["isDeleted"];
            this.addDate = data["addDate"] ? new Date(data["addDate"].toString()) : undefined;
            this.changeDate = data["changeDate"] ? new Date(data["changeDate"].toString()) : undefined;
        }
    };
    AddressQuery.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new AddressQuery();
        result.init(data);
        return result;
    };
    AddressQuery.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["customerKey"] = this.customerKey;
        data["line1"] = this.line1;
        data["line2"] = this.line2;
        data["line3"] = this.line3;
        data["city"] = this.city;
        data["state"] = this.state;
        data["postCode"] = this.postCode;
        data["country"] = this.country;
        data["intlProvince"] = this.intlProvince;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["attention"] = this.attention;
        data["companyName"] = this.companyName;
        data["addressType"] = this.addressType;
        data["isBad"] = this.isBad;
        data["isPrimary"] = this.isPrimary;
        data["isDeleted"] = this.isDeleted;
        data["addDate"] = this.addDate ? this.addDate.toISOString() : undefined;
        data["changeDate"] = this.changeDate ? this.changeDate.toISOString() : undefined;
        return data;
    };
    return AddressQuery;
}());
exports.AddressQuery = AddressQuery;
var Address = /** @class */ (function () {
    function Address(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Address.prototype.init = function (data) {
        if (data) {
            this.key = data["key"];
            this.customerKey = data["customerKey"];
            this.line1 = data["line1"];
            this.line2 = data["line2"];
            this.line3 = data["line3"];
            this.city = data["city"];
            this.state = data["state"];
            this.postCode = data["postCode"];
            this.country = data["country"];
            this.intlProvince = data["intlProvince"];
            this.latitude = data["latitude"];
            this.longitude = data["longitude"];
            this.attention = data["attention"];
            this.companyName = data["companyName"];
            this.addressType = data["addressType"];
            this.isBad = data["isBad"];
            this.isPrimary = data["isPrimary"];
            this.isDeleted = data["isDeleted"];
            this.addDate = data["addDate"] ? new Date(data["addDate"].toString()) : undefined;
            this.changeDate = data["changeDate"] ? new Date(data["changeDate"].toString()) : undefined;
        }
    };
    Address.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Address();
        result.init(data);
        return result;
    };
    Address.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["customerKey"] = this.customerKey;
        data["line1"] = this.line1;
        data["line2"] = this.line2;
        data["line3"] = this.line3;
        data["city"] = this.city;
        data["state"] = this.state;
        data["postCode"] = this.postCode;
        data["country"] = this.country;
        data["intlProvince"] = this.intlProvince;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["attention"] = this.attention;
        data["companyName"] = this.companyName;
        data["addressType"] = this.addressType;
        data["isBad"] = this.isBad;
        data["isPrimary"] = this.isPrimary;
        data["isDeleted"] = this.isDeleted;
        data["addDate"] = this.addDate ? this.addDate.toISOString() : undefined;
        data["changeDate"] = this.changeDate ? this.changeDate.toISOString() : undefined;
        return data;
    };
    return Address;
}());
exports.Address = Address;
var DtoResponseWrapperOfBoolean = /** @class */ (function () {
    function DtoResponseWrapperOfBoolean(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    DtoResponseWrapperOfBoolean.prototype.init = function (data) {
        if (data) {
            this.result = data["result"];
            if (data["errors"] && data["errors"].constructor === Array) {
                this.errors = [];
                for (var _i = 0, _a = data["errors"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.errors.push(KeyValuePairOfStringAndString.fromJS(item));
                }
            }
            if (data["warnings"] && data["warnings"].constructor === Array) {
                this.warnings = [];
                for (var _b = 0, _c = data["warnings"]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.warnings.push(KeyValuePairOfStringAndString.fromJS(item));
                }
            }
            this.errorInfo = data["errorInfo"] ? ErrorInfo.fromJS(data["errorInfo"]) : undefined;
        }
    };
    DtoResponseWrapperOfBoolean.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new DtoResponseWrapperOfBoolean();
        result.init(data);
        return result;
    };
    DtoResponseWrapperOfBoolean.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        if (this.errors && this.errors.constructor === Array) {
            data["errors"] = [];
            for (var _i = 0, _a = this.errors; _i < _a.length; _i++) {
                var item = _a[_i];
                data["errors"].push(item.toJSON());
            }
        }
        if (this.warnings && this.warnings.constructor === Array) {
            data["warnings"] = [];
            for (var _b = 0, _c = this.warnings; _b < _c.length; _b++) {
                var item = _c[_b];
                data["warnings"].push(item.toJSON());
            }
        }
        data["errorInfo"] = this.errorInfo ? this.errorInfo.toJSON() : undefined;
        return data;
    };
    return DtoResponseWrapperOfBoolean;
}());
exports.DtoResponseWrapperOfBoolean = DtoResponseWrapperOfBoolean;
var KeyValuePairOfStringAndString = /** @class */ (function () {
    function KeyValuePairOfStringAndString(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    KeyValuePairOfStringAndString.prototype.init = function (data) {
        if (data) {
            this.key = data["key"];
            this.value = data["value"];
        }
    };
    KeyValuePairOfStringAndString.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new KeyValuePairOfStringAndString();
        result.init(data);
        return result;
    };
    KeyValuePairOfStringAndString.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["value"] = this.value;
        return data;
    };
    return KeyValuePairOfStringAndString;
}());
exports.KeyValuePairOfStringAndString = KeyValuePairOfStringAndString;
var ErrorInfo = /** @class */ (function () {
    function ErrorInfo(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ErrorInfo.prototype.init = function (data) {
        if (data) {
            this.errorCode = data["errorCode"];
            this.errorName = data["errorName"];
            this.errorDescription = data["errorDescription"];
            this.userErrorCode = data["userErrorCode"];
            this.userErrorMessage = data["userErrorMessage"];
            this.type = data["type"];
            this.username = data["username"];
            this.timeStamp = data["timeStamp"];
            this.exceptionDetails = data["exceptionDetails"];
            this.method = data["method"];
        }
    };
    ErrorInfo.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ErrorInfo();
        result.init(data);
        return result;
    };
    ErrorInfo.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["errorCode"] = this.errorCode;
        data["errorName"] = this.errorName;
        data["errorDescription"] = this.errorDescription;
        data["userErrorCode"] = this.userErrorCode;
        data["userErrorMessage"] = this.userErrorMessage;
        data["type"] = this.type;
        data["username"] = this.username;
        data["timeStamp"] = this.timeStamp;
        data["exceptionDetails"] = this.exceptionDetails;
        data["method"] = this.method;
        return data;
    };
    return ErrorInfo;
}());
exports.ErrorInfo = ErrorInfo;
var DtoResponseWrapperOfGuid = /** @class */ (function () {
    function DtoResponseWrapperOfGuid(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    DtoResponseWrapperOfGuid.prototype.init = function (data) {
        if (data) {
            this.result = data["result"];
            if (data["errors"] && data["errors"].constructor === Array) {
                this.errors = [];
                for (var _i = 0, _a = data["errors"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.errors.push(KeyValuePairOfStringAndString.fromJS(item));
                }
            }
            if (data["warnings"] && data["warnings"].constructor === Array) {
                this.warnings = [];
                for (var _b = 0, _c = data["warnings"]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.warnings.push(KeyValuePairOfStringAndString.fromJS(item));
                }
            }
            this.errorInfo = data["errorInfo"] ? ErrorInfo.fromJS(data["errorInfo"]) : undefined;
        }
    };
    DtoResponseWrapperOfGuid.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new DtoResponseWrapperOfGuid();
        result.init(data);
        return result;
    };
    DtoResponseWrapperOfGuid.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result;
        if (this.errors && this.errors.constructor === Array) {
            data["errors"] = [];
            for (var _i = 0, _a = this.errors; _i < _a.length; _i++) {
                var item = _a[_i];
                data["errors"].push(item.toJSON());
            }
        }
        if (this.warnings && this.warnings.constructor === Array) {
            data["warnings"] = [];
            for (var _b = 0, _c = this.warnings; _b < _c.length; _b++) {
                var item = _c[_b];
                data["warnings"].push(item.toJSON());
            }
        }
        data["errorInfo"] = this.errorInfo ? this.errorInfo.toJSON() : undefined;
        return data;
    };
    return DtoResponseWrapperOfGuid;
}());
exports.DtoResponseWrapperOfGuid = DtoResponseWrapperOfGuid;
var EmailAddressQuery = /** @class */ (function () {
    function EmailAddressQuery(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    EmailAddressQuery.prototype.init = function (data) {
        if (data) {
            this.key = data["key"];
            this.emailAddress = data["emailAddress"];
            this.customerKey = data["customerKey"];
            this.type = data["type"];
            this.isInvalid = data["isInvalid"];
            this.isInvalidReason = data["isInvalidReason"];
            this.isUnlisted = data["isUnlisted"];
            this.isDeleted = data["isDeleted"];
            this.addDate = data["addDate"] ? new Date(data["addDate"].toString()) : undefined;
            this.changeDate = data["changeDate"] ? new Date(data["changeDate"].toString()) : undefined;
            this.isPrimary = data["isPrimary"];
        }
    };
    EmailAddressQuery.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new EmailAddressQuery();
        result.init(data);
        return result;
    };
    EmailAddressQuery.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["emailAddress"] = this.emailAddress;
        data["customerKey"] = this.customerKey;
        data["type"] = this.type;
        data["isInvalid"] = this.isInvalid;
        data["isInvalidReason"] = this.isInvalidReason;
        data["isUnlisted"] = this.isUnlisted;
        data["isDeleted"] = this.isDeleted;
        data["addDate"] = this.addDate ? this.addDate.toISOString() : undefined;
        data["changeDate"] = this.changeDate ? this.changeDate.toISOString() : undefined;
        data["isPrimary"] = this.isPrimary;
        return data;
    };
    return EmailAddressQuery;
}());
exports.EmailAddressQuery = EmailAddressQuery;
var Email = /** @class */ (function () {
    function Email(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Email.prototype.init = function (data) {
        if (data) {
            this.key = data["key"];
            this.emailAddress = data["emailAddress"];
            this.customerKey = data["customerKey"];
            this.type = data["type"];
            this.isInvalid = data["isInvalid"];
            this.isInvalidReason = data["isInvalidReason"];
            this.isUnlisted = data["isUnlisted"];
            this.isDeleted = data["isDeleted"];
            this.isPrimary = data["isPrimary"];
            this.addDate = data["addDate"] ? new Date(data["addDate"].toString()) : undefined;
            this.changeDate = data["changeDate"] ? new Date(data["changeDate"].toString()) : undefined;
        }
    };
    Email.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Email();
        result.init(data);
        return result;
    };
    Email.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["emailAddress"] = this.emailAddress;
        data["customerKey"] = this.customerKey;
        data["type"] = this.type;
        data["isInvalid"] = this.isInvalid;
        data["isInvalidReason"] = this.isInvalidReason;
        data["isUnlisted"] = this.isUnlisted;
        data["isDeleted"] = this.isDeleted;
        data["isPrimary"] = this.isPrimary;
        data["addDate"] = this.addDate ? this.addDate.toISOString() : undefined;
        data["changeDate"] = this.changeDate ? this.changeDate.toISOString() : undefined;
        return data;
    };
    return Email;
}());
exports.Email = Email;
var DtoResponseWrapperOfEmail = /** @class */ (function () {
    function DtoResponseWrapperOfEmail(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    DtoResponseWrapperOfEmail.prototype.init = function (data) {
        if (data) {
            this.result = data["result"] ? Email.fromJS(data["result"]) : undefined;
            if (data["errors"] && data["errors"].constructor === Array) {
                this.errors = [];
                for (var _i = 0, _a = data["errors"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.errors.push(KeyValuePairOfStringAndString.fromJS(item));
                }
            }
            if (data["warnings"] && data["warnings"].constructor === Array) {
                this.warnings = [];
                for (var _b = 0, _c = data["warnings"]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.warnings.push(KeyValuePairOfStringAndString.fromJS(item));
                }
            }
            this.errorInfo = data["errorInfo"] ? ErrorInfo.fromJS(data["errorInfo"]) : undefined;
        }
    };
    DtoResponseWrapperOfEmail.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new DtoResponseWrapperOfEmail();
        result.init(data);
        return result;
    };
    DtoResponseWrapperOfEmail.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : undefined;
        if (this.errors && this.errors.constructor === Array) {
            data["errors"] = [];
            for (var _i = 0, _a = this.errors; _i < _a.length; _i++) {
                var item = _a[_i];
                data["errors"].push(item.toJSON());
            }
        }
        if (this.warnings && this.warnings.constructor === Array) {
            data["warnings"] = [];
            for (var _b = 0, _c = this.warnings; _b < _c.length; _b++) {
                var item = _c[_b];
                data["warnings"].push(item.toJSON());
            }
        }
        data["errorInfo"] = this.errorInfo ? this.errorInfo.toJSON() : undefined;
        return data;
    };
    return DtoResponseWrapperOfEmail;
}());
exports.DtoResponseWrapperOfEmail = DtoResponseWrapperOfEmail;
var PhoneQuery = /** @class */ (function () {
    function PhoneQuery(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    PhoneQuery.prototype.init = function (data) {
        if (data) {
            this.key = data["key"];
            this.customerKey = data["customerKey"];
            this.phoneNo = data["phoneNo"];
            this.formattedNo = data["formattedNo"];
            this.countryKey = data["countryKey"];
            this.countryCode = data["countryCode"];
            this.addDate = data["addDate"] ? new Date(data["addDate"].toString()) : undefined;
            this.addUser = data["addUser"];
            this.changeUser = data["changeUser"];
            this.changeDate = data["changeDate"] ? new Date(data["changeDate"].toString()) : undefined;
            this.isPrimary = data["isPrimary"];
            this.isDeleted = data["isDeleted"];
            this.phoneType = data["phoneType"];
            this.phoneExt = data["phoneExt"];
        }
    };
    PhoneQuery.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new PhoneQuery();
        result.init(data);
        return result;
    };
    PhoneQuery.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["customerKey"] = this.customerKey;
        data["phoneNo"] = this.phoneNo;
        data["formattedNo"] = this.formattedNo;
        data["countryKey"] = this.countryKey;
        data["countryCode"] = this.countryCode;
        data["addDate"] = this.addDate ? this.addDate.toISOString() : undefined;
        data["addUser"] = this.addUser;
        data["changeUser"] = this.changeUser;
        data["changeDate"] = this.changeDate ? this.changeDate.toISOString() : undefined;
        data["isPrimary"] = this.isPrimary;
        data["isDeleted"] = this.isDeleted;
        data["phoneType"] = this.phoneType;
        data["phoneExt"] = this.phoneExt;
        return data;
    };
    return PhoneQuery;
}());
exports.PhoneQuery = PhoneQuery;
var Phone = /** @class */ (function () {
    function Phone(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    Phone.prototype.init = function (data) {
        if (data) {
            this.key = data["key"];
            this.countryCode = data["countryCode"];
            this.customerKey = data["customerKey"];
            this.formattedNo = data["formattedNo"];
            this.isDeleted = data["isDeleted"];
            this.phoneType = data["phoneType"];
            this.addDate = data["addDate"] ? new Date(data["addDate"].toString()) : undefined;
            this.changeDate = data["changeDate"] ? new Date(data["changeDate"].toString()) : undefined;
            this.isPrimary = data["isPrimary"];
            this.phoneNo = data["phoneNo"];
            this.phoneExt = data["phoneExt"];
        }
    };
    Phone.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new Phone();
        result.init(data);
        return result;
    };
    Phone.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["countryCode"] = this.countryCode;
        data["customerKey"] = this.customerKey;
        data["formattedNo"] = this.formattedNo;
        data["isDeleted"] = this.isDeleted;
        data["phoneType"] = this.phoneType;
        data["addDate"] = this.addDate ? this.addDate.toISOString() : undefined;
        data["changeDate"] = this.changeDate ? this.changeDate.toISOString() : undefined;
        data["isPrimary"] = this.isPrimary;
        data["phoneNo"] = this.phoneNo;
        data["phoneExt"] = this.phoneExt;
        return data;
    };
    return Phone;
}());
exports.Phone = Phone;
var DtoResponseWrapperOfPhone = /** @class */ (function () {
    function DtoResponseWrapperOfPhone(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    DtoResponseWrapperOfPhone.prototype.init = function (data) {
        if (data) {
            this.result = data["result"] ? Phone.fromJS(data["result"]) : undefined;
            if (data["errors"] && data["errors"].constructor === Array) {
                this.errors = [];
                for (var _i = 0, _a = data["errors"]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    this.errors.push(KeyValuePairOfStringAndString.fromJS(item));
                }
            }
            if (data["warnings"] && data["warnings"].constructor === Array) {
                this.warnings = [];
                for (var _b = 0, _c = data["warnings"]; _b < _c.length; _b++) {
                    var item = _c[_b];
                    this.warnings.push(KeyValuePairOfStringAndString.fromJS(item));
                }
            }
            this.errorInfo = data["errorInfo"] ? ErrorInfo.fromJS(data["errorInfo"]) : undefined;
        }
    };
    DtoResponseWrapperOfPhone.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new DtoResponseWrapperOfPhone();
        result.init(data);
        return result;
    };
    DtoResponseWrapperOfPhone.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : undefined;
        if (this.errors && this.errors.constructor === Array) {
            data["errors"] = [];
            for (var _i = 0, _a = this.errors; _i < _a.length; _i++) {
                var item = _a[_i];
                data["errors"].push(item.toJSON());
            }
        }
        if (this.warnings && this.warnings.constructor === Array) {
            data["warnings"] = [];
            for (var _b = 0, _c = this.warnings; _b < _c.length; _b++) {
                var item = _c[_b];
                data["warnings"].push(item.toJSON());
            }
        }
        data["errorInfo"] = this.errorInfo ? this.errorInfo.toJSON() : undefined;
        return data;
    };
    return DtoResponseWrapperOfPhone;
}());
exports.DtoResponseWrapperOfPhone = DtoResponseWrapperOfPhone;
var ILookupable = /** @class */ (function () {
    function ILookupable(data) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    this[property] = data[property];
            }
        }
    }
    ILookupable.prototype.init = function (data) {
        if (data) {
            this.display = data["display"];
            this.key = data["key"];
        }
    };
    ILookupable.fromJS = function (data) {
        data = typeof data === 'object' ? data : {};
        var result = new ILookupable();
        result.init(data);
        return result;
    };
    ILookupable.prototype.toJSON = function (data) {
        data = typeof data === 'object' ? data : {};
        data["display"] = this.display;
        data["key"] = this.key;
        return data;
    };
    return ILookupable;
}());
exports.ILookupable = ILookupable;
var SwaggerException = /** @class */ (function (_super) {
    __extends(SwaggerException, _super);
    function SwaggerException(message, status, response, headers, result) {
        var _this = _super.call(this) || this;
        _this.isSwaggerException = true;
        _this.message = message;
        _this.status = status;
        _this.response = response;
        _this.headers = headers;
        _this.result = result;
        return _this;
    }
    SwaggerException.isSwaggerException = function (obj) {
        return obj.isSwaggerException === true;
    };
    return SwaggerException;
}(Error));
exports.SwaggerException = SwaggerException;
function throwException(message, status, response, headers, result) {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}


let newrequest = new Client('http://nfdev:9023/index.html');


newrequest.then(res=>console.log(res)).catch(err=>console.log(err))